{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u9879\u76ee\u5185\u5bb9 \u8bbe\u8ba1\u6a21\u5f0f \u9879\u76ee\u5730\u5740 <!-- mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. -->","title":"Index"},{"location":"#_1","text":"","title":"\u9879\u76ee\u5185\u5bb9"},{"location":"#_2","text":"","title":"\u8bbe\u8ba1\u6a21\u5f0f"},{"location":"#_3","text":"<!-- mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. -->","title":"\u9879\u76ee\u5730\u5740"},{"location":"about/license/","text":"license.md reles","title":"License"},{"location":"about/license/#licensemd","text":"reles","title":"license.md"},{"location":"about/release-notes/","text":"release-notes.md \u4f60\u770b","title":"Release Notes"},{"location":"about/release-notes/#release-notesmd","text":"\u4f60\u770b","title":"release-notes.md"},{"location":"base-adviance-golang/defer/","text":"defer \u5173\u952e\u5b57 defer \u2f64\u4e8e\u5ef6\u8fdf\u4e00\u4e2a\u51fd\u6570\u6216\u8005\u65b9\u6cd5\uff08\u6216\u8005\u5f53\u524d\u6240\u521b\u5efa\u7684\u533f\u540d\u51fd\u6570\uff09\u7684\u6267\u884c\u3002\u6ce8\u610f\uff0cdefer\u8bed\u53e5\u53ea\u80fd\u51fa\u73b0\u5728\u51fd\u6570\u6216\u65b9\u6cd5\u7684\u5185\u90e8 defer\u8bed\u53e5\u7ecf\u5e38\u88ab\u7528\u4e8e\u5904\u7406\u6210\u5bf9\u7684\u64cd\u4f5c\uff0c\u5982\u6253\u5f00\u3001\u5173\u95ed\u3001\u8fde\u63a5\u3001\u65ad\u5f00\u8fde\u63a5\u3001\u52a0\u9501\u3001\u91ca\u653e\u9501\u3002\u901a\u8fc7defer\u673a\u5236\uff0c\u4e0d\u8bba\u51fd\u6570\u903b\u8f91\u591a\u590d\u6742\uff0c\u90fd\u80fd\u4fdd\u8bc1\u5728\u4efb\u4f55\u6267\u884c\u8def\u5f84\u4e0b\uff0c\u8d44\u6e90\u88ab\u91ca\u653e\u3002\u91ca\u653e\u8d44\u6e90\u7684defer\u5e94\u8be5\u76f4\u63a5\u8ddf\u5728\u8bf7\u6c42\u8d44\u6e90\u7684\u8bed\u53e5\u540e \u591a\u4e2adefer\u6267\u884c\u987a\u5e8f \u4ee5LIFO\uff08\u540e\u8fdb\u5148\u51fa\uff09\u7684\u987a\u5e8f\u6267\u884c\u3002\u54ea\u6015\u51fd\u6570\u6216\u67d0\u4e2a\u5ef6\u8fdf\u8c03\u7528\u53d1\u751f\u9519\u8bef\uff0c\u8fd9\u4e9b\u8c03\u7528\u4f9d\u65e7\u4f1a\u88ab\u6267\u2f8f\u3002 package main //\u5fc5\u987b import \"fmt\" func test(x int) { result := 100 / x fmt.Println(\"result = \", result) } func main() { defer fmt.Println(\"liuhu\") //\u82e5\u679c\u53c2\u6570\u4e3a\u96f6\uff0c\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\uff0c\u5bfc\u81f4\u5185\u5b58\u51fa\u95ee\u9898\uff0c\u5219\u9519\u8bef\u6700\u540e\u62a5\u51fa defer test(2) defer fmt.Println(\"newtask\") } #\u6267\u884c\u7ed3\u679c\u987a\u5e8f\uff1a newtask result = 50 liuhu defer\u548c\u533f\u540d\u51fd\u6570\u7ed3\u5408\u4f7f\u7528 \u6ce8\u610f\u53c2\u6570\u7684\u4f20\u9012 \u53ef\u4ee5\u4e0e\u95ed\u5305\u7ed3\u5408\u7406\u89e3 package main import \"fmt\" func main() { a := 100 b := 200 defer func(a, b int) { fmt.Printf(\"a = %d, b = %d\\n\", a, b) }(a, b) //()\u4ee3\u8868\u8c03\u7528\u6b64\u533f\u540d\u51fd\u6570, \u628a\u53c2\u6570\u4f20\u9012\u8fc7\u53bb\uff0c\u5df2\u7ecf\u5148\u4f20\u9012\u53c2\u6570\uff0c\u53ea\u662f\u6ca1\u6709\u8c03\u7528 defer func(a, b int) { fmt.Printf(\"a = %d, b = %d\\n\", a, b) }(10, 20) //()\u4ee3\u8868\u8c03\u7528\u6b64\u533f\u540d\u51fd\u6570, \u76f4\u63a5\u6307\u5b9a\u53c2\u6570\u4f20\u9012\u8fc7\u53bb\uff0c\u5df2\u7ecf\u5148\u4f20\u9012\u53c2\u6570\uff0c\u53ea\u662f\u6ca1\u6709\u8c03\u7528 a += 50 b += 400 fmt.Printf(\"\u5916\u90e8\uff1aa = %d, b = %d\\n\", a, b) } //\u5916\u90e8\uff1aa = 150, b = 600 //a = 10, b = 20 //a = 100, b = 200","title":"defer"},{"location":"base-adviance-golang/defer/#defer","text":"\u5173\u952e\u5b57 defer \u2f64\u4e8e\u5ef6\u8fdf\u4e00\u4e2a\u51fd\u6570\u6216\u8005\u65b9\u6cd5\uff08\u6216\u8005\u5f53\u524d\u6240\u521b\u5efa\u7684\u533f\u540d\u51fd\u6570\uff09\u7684\u6267\u884c\u3002\u6ce8\u610f\uff0cdefer\u8bed\u53e5\u53ea\u80fd\u51fa\u73b0\u5728\u51fd\u6570\u6216\u65b9\u6cd5\u7684\u5185\u90e8 defer\u8bed\u53e5\u7ecf\u5e38\u88ab\u7528\u4e8e\u5904\u7406\u6210\u5bf9\u7684\u64cd\u4f5c\uff0c\u5982\u6253\u5f00\u3001\u5173\u95ed\u3001\u8fde\u63a5\u3001\u65ad\u5f00\u8fde\u63a5\u3001\u52a0\u9501\u3001\u91ca\u653e\u9501\u3002\u901a\u8fc7defer\u673a\u5236\uff0c\u4e0d\u8bba\u51fd\u6570\u903b\u8f91\u591a\u590d\u6742\uff0c\u90fd\u80fd\u4fdd\u8bc1\u5728\u4efb\u4f55\u6267\u884c\u8def\u5f84\u4e0b\uff0c\u8d44\u6e90\u88ab\u91ca\u653e\u3002\u91ca\u653e\u8d44\u6e90\u7684defer\u5e94\u8be5\u76f4\u63a5\u8ddf\u5728\u8bf7\u6c42\u8d44\u6e90\u7684\u8bed\u53e5\u540e","title":"defer"},{"location":"base-adviance-golang/defer/#defer_1","text":"\u4ee5LIFO\uff08\u540e\u8fdb\u5148\u51fa\uff09\u7684\u987a\u5e8f\u6267\u884c\u3002\u54ea\u6015\u51fd\u6570\u6216\u67d0\u4e2a\u5ef6\u8fdf\u8c03\u7528\u53d1\u751f\u9519\u8bef\uff0c\u8fd9\u4e9b\u8c03\u7528\u4f9d\u65e7\u4f1a\u88ab\u6267\u2f8f\u3002 package main //\u5fc5\u987b import \"fmt\" func test(x int) { result := 100 / x fmt.Println(\"result = \", result) } func main() { defer fmt.Println(\"liuhu\") //\u82e5\u679c\u53c2\u6570\u4e3a\u96f6\uff0c\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\uff0c\u5bfc\u81f4\u5185\u5b58\u51fa\u95ee\u9898\uff0c\u5219\u9519\u8bef\u6700\u540e\u62a5\u51fa defer test(2) defer fmt.Println(\"newtask\") } #\u6267\u884c\u7ed3\u679c\u987a\u5e8f\uff1a newtask result = 50 liuhu","title":"\u591a\u4e2adefer\u6267\u884c\u987a\u5e8f"},{"location":"base-adviance-golang/defer/#defer_2","text":"\u6ce8\u610f\u53c2\u6570\u7684\u4f20\u9012 \u53ef\u4ee5\u4e0e\u95ed\u5305\u7ed3\u5408\u7406\u89e3 package main import \"fmt\" func main() { a := 100 b := 200 defer func(a, b int) { fmt.Printf(\"a = %d, b = %d\\n\", a, b) }(a, b) //()\u4ee3\u8868\u8c03\u7528\u6b64\u533f\u540d\u51fd\u6570, \u628a\u53c2\u6570\u4f20\u9012\u8fc7\u53bb\uff0c\u5df2\u7ecf\u5148\u4f20\u9012\u53c2\u6570\uff0c\u53ea\u662f\u6ca1\u6709\u8c03\u7528 defer func(a, b int) { fmt.Printf(\"a = %d, b = %d\\n\", a, b) }(10, 20) //()\u4ee3\u8868\u8c03\u7528\u6b64\u533f\u540d\u51fd\u6570, \u76f4\u63a5\u6307\u5b9a\u53c2\u6570\u4f20\u9012\u8fc7\u53bb\uff0c\u5df2\u7ecf\u5148\u4f20\u9012\u53c2\u6570\uff0c\u53ea\u662f\u6ca1\u6709\u8c03\u7528 a += 50 b += 400 fmt.Printf(\"\u5916\u90e8\uff1aa = %d, b = %d\\n\", a, b) } //\u5916\u90e8\uff1aa = 150, b = 600 //a = 10, b = 20 //a = 100, b = 200","title":"defer\u548c\u533f\u540d\u51fd\u6570\u7ed3\u5408\u4f7f\u7528"},{"location":"python-design-patterns/Chain/","text":"\u6982\u5ff5 \u4ee3\u7801\u5b9e\u73b0","title":"\u8bbe\u8ba1\u6a21\u5f0f"},{"location":"python-design-patterns/Chain/#_1","text":"","title":"\u6982\u5ff5"},{"location":"python-design-patterns/Chain/#_2","text":"","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"python-design-patterns/python-design/","text":"\u76ee\u5f55 \u5b66\u4e60\u8bbe\u8ba1\u6a21\u5f0f\u7684\u65f6\u673a\u4e0e\u6280\u5de7 \u8bbe\u8ba1\u6a21\u5f0f\u7684\u539f\u5219 \u591a\u4e2a\u8bbe\u8ba1\u6a21\u5f0f\u7684\u4ecb\u7ecd \u5b9e\u6218\u9879\u76ee\u4e0e\u8003\u9898\u7406\u89e3\u8bbe\u8ba1\u6a21\u5f0f \u5173\u4e8e\u8bbe\u8ba1\u6a21\u5f0f\u4f18\u79c0\u8d44\u6e90(\u4f18\u79c0\u6587\u7ae0\u8d44\u6e90\u53ca\u76f8\u5173\u4e66\u7c4d\u63a8\u8350) \u5b66\u4e60\u8bbe\u8ba1\u6a21\u5f0f\u7684\u65f6\u673a\u4e0e\u6280\u5de7 \u5efa\u8bae\u5728\u6ca1\u6709\u8db3\u591f\u9879\u76ee\u7ecf\u9a8c\u65f6\u53ef\u4ee5\u5148\u8fc7\u4e00\u904d\uff0c\u4e86\u89e3\u57fa\u672c\u7684\u6982\u5ff5 \u5f53\u79ef\u7d2f\u4e00\u4e9b\u5de5\u4f5c\u7ecf\u9a8c\u540e\uff0c\u53ef\u4ee5\u6311\u9009\u5e38\u89c1\u91cd\u70b9\u8bbe\u8ba1\u6a21\u5f0f\u8fdb\u884c\u7406\u89e3\u5e76\u53ef\u4ee5\u9009\u62e9\u5386\u5e74\u7684\u8003\u9898\u4e0e\u9879\u76ee\u52a0\u6df1\u7406\u89e3 \u8bbe\u8ba1\u6a21\u5f0f\u7684\u539f\u5219 \u5355\u4e00\u804c\u8d23\u539f\u5219 \u5355\u4e00\u804c\u8d23\u539f\u5219(Single Responsibility Principle, SRP)\uff1a\u4e00\u4e2a\u7c7b\u53ea\u8d1f\u8d23\u4e00\u4e2a\u529f\u80fd\u9886\u57df\u4e2d\u7684\u76f8\u5e94\u804c\u8d23\uff0c\u6216\u8005\u53ef\u4ee5\u5b9a\u4e49\u4e3a\uff1a\u5c31\u4e00\u4e2a\u7c7b\u800c\u8a00\uff0c\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a\u5f15\u8d77\u5b83\u53d8\u5316\u7684\u539f\u56e0\u3002 \u5355\u4e00\u804c\u8d23\u539f\u5219\u544a\u8bc9\u6211\u4eec\uff1a\u4e00\u4e2a\u7c7b\u4e0d\u80fd\u592a\u201c\u7d2f\u201d\uff01\u5728\u8f6f\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u4e00\u4e2a\u7c7b\uff08\u5927\u5230\u6a21\u5757\uff0c\u5c0f\u5230\u65b9\u6cd5\uff09\u627f\u62c5\u7684\u804c\u8d23\u8d8a\u591a\uff0c\u5b83\u88ab\u590d\u7528\u7684\u53ef\u80fd\u6027\u5c31\u8d8a\u5c0f\uff0c\u800c\u4e14\u4e00\u4e2a\u7c7b\u627f\u62c5\u7684\u804c\u8d23\u8fc7\u591a\uff0c\u5c31\u76f8\u5f53\u4e8e\u5c06\u8fd9\u4e9b\u804c\u8d23\u8026\u5408\u5728\u4e00\u8d77\uff0c\u5f53\u5176\u4e2d\u4e00\u4e2a\u804c\u8d23\u53d8\u5316\u65f6\uff0c\u53ef\u80fd\u4f1a\u5f71\u54cd\u5176\u4ed6\u804c\u8d23\u7684\u8fd0\u4f5c\uff0c\u56e0\u6b64\u8981\u5c06\u8fd9\u4e9b\u804c\u8d23\u8fdb\u884c\u5206\u79bb\uff0c\u5c06\u4e0d\u540c\u7684\u804c\u8d23\u5c01\u88c5\u5728\u4e0d\u540c\u7684\u7c7b\u4e2d\uff0c\u5373\u5c06\u4e0d\u540c\u7684\u53d8\u5316\u539f\u56e0\u5c01\u88c5\u5728\u4e0d\u540c\u7684\u7c7b\u4e2d\uff0c\u5982\u679c\u591a\u4e2a\u804c\u8d23\u603b\u662f\u540c\u65f6\u53d1\u751f\u6539\u53d8\u5219\u53ef\u5c06\u5b83\u4eec\u5c01\u88c5\u5728\u540c\u4e00\u7c7b\u4e2d\u3002 \u5355\u4e00\u804c\u8d23\u539f\u5219\u662f\u5b9e\u73b0\u9ad8\u5185\u805a\u3001\u4f4e\u8026\u5408\u7684\u6307\u5bfc\u65b9\u9488\uff0c\u5b83\u662f\u6700\u7b80\u5355\u4f46\u53c8\u6700\u96be\u8fd0\u7528\u7684\u539f\u5219\uff0c\u9700\u8981\u8bbe\u8ba1\u4eba\u5458\u53d1\u73b0\u7c7b\u7684\u4e0d\u540c\u804c\u8d23\u5e76\u5c06\u5176\u5206\u79bb\uff0c\u800c\u53d1\u73b0\u7c7b\u7684\u591a\u91cd\u804c\u8d23\u9700\u8981\u8bbe\u8ba1\u4eba\u5458\u5177\u6709\u8f83\u5f3a\u7684\u5206\u6790\u8bbe\u8ba1\u80fd\u529b\u548c\u76f8\u5173\u5b9e\u8df5\u7ecf\u9a8c \u5f00\u95ed\u539f\u5219(Open-Closed Principle, OCP) \u4e00\u4e2a\u8f6f\u4ef6\u5b9e\u4f53\u5e94\u5f53\u5bf9\u6269\u5c55\u5f00\u653e\uff0c\u5bf9\u4fee\u6539\u5173\u95ed\u3002\u5373\u8f6f\u4ef6\u5b9e\u4f53\u5e94\u5c3d\u91cf\u5728\u4e0d\u4fee\u6539\u539f\u6709\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u6269\u5c55\u3002 \u5728\u5f00\u95ed\u539f\u5219\u7684\u5b9a\u4e49\u4e2d\uff0c\u8f6f\u4ef6\u5b9e\u4f53\u53ef\u4ee5\u6307\u4e00\u4e2a\u8f6f\u4ef6\u6a21\u5757\u3001\u4e00\u4e2a\u7531\u591a\u4e2a\u7c7b\u7ec4\u6210\u7684\u5c40\u90e8\u7ed3\u6784\u6216\u4e00\u4e2a\u72ec\u7acb\u7684\u7c7b\u3002 \u4e3a\u4e86\u6ee1\u8db3\u5f00\u95ed\u539f\u5219\uff0c\u9700\u8981\u5bf9\u7cfb\u7edf\u8fdb\u884c\u62bd\u8c61\u5316\u8bbe\u8ba1\uff0c\u62bd\u8c61\u5316\u662f\u5f00\u95ed\u539f\u5219\u7684\u5173\u952e\u3002 \u91cc\u6c0f\u66ff\u6362\u539f\u5219 \u91cc\u6c0f\u4ee3\u6362\u539f\u5219(Liskov Substitution Principle, LSP)\uff1a\u6240\u6709\u5f15\u7528\u57fa\u7c7b\uff08\u7236\u7c7b\uff09\u7684\u5730\u65b9\u5fc5\u987b\u80fd\u900f\u660e\u5730\u4f7f\u7528\u5176\u5b50\u7c7b\u7684\u5bf9\u8c61 \u91cc\u6c0f\u4ee3\u6362\u539f\u5219\u544a\u8bc9\u6211\u4eec\uff0c\u5728\u8f6f\u4ef6\u4e2d\u5c06\u4e00\u4e2a\u57fa\u7c7b\u5bf9\u8c61\u66ff\u6362\u6210\u5b83\u7684\u5b50\u7c7b\u5bf9\u8c61\uff0c\u7a0b\u5e8f\u5c06\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u9519\u8bef\u548c\u5f02\u5e38\uff0c\u53cd\u8fc7\u6765\u5219\u4e0d\u6210\u7acb\uff0c\u5982\u679c\u4e00\u4e2a\u8f6f\u4ef6\u5b9e\u4f53\u4f7f\u7528\u7684\u662f\u4e00\u4e2a\u5b50\u7c7b\u5bf9\u8c61\u7684\u8bdd\uff0c\u90a3\u4e48\u5b83\u4e0d\u4e00\u5b9a\u80fd\u591f\u4f7f\u7528\u57fa\u7c7b\u5bf9\u8c61\u3002\u4f8b\u5982\uff1a\u6211\u559c\u6b22\u52a8\u7269\uff0c\u90a3\u6211\u4e00\u5b9a\u559c\u6b22\u72d7\uff0c\u56e0\u4e3a\u72d7\u662f\u52a8\u7269\u7684\u5b50\u7c7b\uff1b\u4f46\u662f\u6211\u559c\u6b22\u72d7\uff0c\u4e0d\u80fd\u636e\u6b64\u65ad\u5b9a\u6211\u559c\u6b22\u52a8\u7269\uff0c\u56e0\u4e3a\u6211\u5e76\u4e0d\u559c\u6b22\u8001\u9f20\uff0c\u867d\u7136\u5b83\u4e5f\u662f\u52a8\u7269. \u91cc\u6c0f\u4ee3\u6362\u539f\u5219\u662f\u5b9e\u73b0\u5f00\u95ed\u539f\u5219\u7684\u91cd\u8981\u65b9\u5f0f\u4e4b\u4e00\uff0c\u7531\u4e8e\u4f7f\u7528\u57fa\u7c7b\u5bf9\u8c61\u7684\u5730\u65b9\u90fd\u53ef\u4ee5\u4f7f\u7528\u5b50\u7c7b\u5bf9\u8c61\uff0c\u56e0\u6b64 \u5728\u7a0b\u5e8f\u4e2d\u5c3d\u91cf\u4f7f\u7528\u57fa\u7c7b\u7c7b\u578b\u6765\u5bf9\u5bf9\u8c61\u8fdb\u884c\u5b9a\u4e49\uff0c\u800c\u5728\u8fd0\u884c\u65f6\u518d\u786e\u5b9a\u5176\u5b50\u7c7b\u7c7b\u578b\uff0c\u7528\u5b50\u7c7b\u5bf9\u8c61\u6765\u66ff\u6362\u7236\u7c7b\u5bf9\u8c61 \u4f9d\u8d56\u5012\u8f6c\u539f\u5219(Dependency Inversion Principle, DIP)\uff1a \u62bd\u8c61\u4e0d\u5e94\u8be5\u4f9d\u8d56\u4e8e\u7ec6\u8282\uff0c\u7ec6\u8282\u5e94\u5f53\u4f9d\u8d56\u4e8e\u62bd\u8c61\u3002\u6362\u8a00\u4e4b\uff0c\u8981\u9488\u5bf9\u63a5\u53e3\u7f16\u7a0b\uff0c\u800c\u4e0d\u662f\u9488\u5bf9\u5b9e\u73b0\u7f16\u7a0b\u3002 \u4f9d\u8d56\u5012\u8f6c\u539f\u5219\u8981\u6c42\u6211\u4eec\u5728\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u4f20\u9012\u53c2\u6570\u65f6\u6216\u5728\u5173\u8054\u5173\u7cfb\u4e2d\uff0c\u5c3d\u91cf\u5f15\u7528\u5c42\u6b21\u9ad8\u7684\u62bd\u8c61\u5c42\u7c7b\uff0c\u5373\u4f7f\u7528\u63a5\u53e3\u548c\u62bd\u8c61\u7c7b\u8fdb\u884c\u53d8\u91cf\u7c7b\u578b\u58f0\u660e\u3001\u53c2\u6570\u7c7b\u578b\u58f0\u660e\u3001\u65b9\u6cd5\u8fd4\u56de\u7c7b\u578b\u58f0\u660e\uff0c\u4ee5\u53ca\u6570\u636e\u7c7b\u578b\u7684\u8f6c\u6362\u7b49\uff0c\u800c\u4e0d\u8981\u7528\u5177\u4f53\u7c7b\u6765\u505a\u8fd9\u4e9b\u4e8b\u60c5\u3002\u4e3a\u4e86\u786e\u4fdd\u8be5\u539f\u5219\u7684\u5e94\u7528\uff0c\u4e00\u4e2a\u5177\u4f53\u7c7b\u5e94\u5f53\u53ea\u5b9e\u73b0\u63a5\u53e3\u6216\u62bd\u8c61\u7c7b\u4e2d\u58f0\u660e\u8fc7\u7684\u65b9\u6cd5\uff0c\u800c\u4e0d\u8981\u7ed9\u51fa\u591a\u4f59\u7684\u65b9\u6cd5\uff0c\u5426\u5219\u5c06\u65e0\u6cd5\u8c03\u7528\u5230\u5728\u5b50\u7c7b\u4e2d\u589e\u52a0\u7684\u65b0\u65b9\u6cd5 \u5728\u5b9e\u73b0\u4f9d\u8d56\u5012\u8f6c\u539f\u5219\u65f6\uff0c\u6211\u4eec\u9700\u8981\u9488\u5bf9\u62bd\u8c61\u5c42\u7f16\u7a0b\uff0c\u800c\u5c06\u5177\u4f53\u7c7b\u7684\u5bf9\u8c61\u901a\u8fc7\u4f9d\u8d56\u6ce8\u5165(DependencyInjection, DI)\u7684\u65b9\u5f0f\u6ce8\u5165\u5230\u5176\u4ed6\u5bf9\u8c61\u4e2d\uff0c\u4f9d\u8d56\u6ce8\u5165\u662f\u6307\u5f53\u4e00\u4e2a\u5bf9\u8c61\u8981\u4e0e\u5176\u4ed6\u5bf9\u8c61\u53d1\u751f\u4f9d\u8d56\u5173\u7cfb\u65f6\uff0c\u901a\u8fc7\u62bd\u8c61\u6765\u6ce8\u5165\u6240\u4f9d\u8d56\u7684\u5bf9\u8c61\u3002\u5e38\u7528\u7684\u6ce8\u5165\u65b9\u5f0f\u6709\u4e09\u79cd\uff0c\u5206\u522b\u662f\uff1a\u6784\u9020\u6ce8\u5165\uff0c\u8bbe\u503c\u6ce8\u5165\uff08Setter\u6ce8\u5165\uff09\u548c\u63a5\u53e3\u6ce8\u5165\u3002\u6784\u9020\u6ce8\u5165\u662f\u6307\u901a\u8fc7\u6784\u9020\u51fd\u6570\u6765\u4f20\u5165\u5177\u4f53\u7c7b\u7684\u5bf9\u8c61\uff0c\u8bbe\u503c\u6ce8\u5165\u662f\u6307\u901a\u8fc7Setter\u65b9\u6cd5\u6765\u4f20\u5165\u5177\u4f53\u7c7b\u7684\u5bf9\u8c61\uff0c\u800c\u63a5\u53e3\u6ce8\u5165\u662f\u6307\u901a\u8fc7\u5728\u63a5\u53e3\u4e2d\u58f0\u660e\u7684\u4e1a\u52a1\u65b9\u6cd5\u6765\u4f20\u5165\u5177\u4f53\u7c7b\u7684\u5bf9\u8c61\u3002\u8fd9\u4e9b\u65b9\u6cd5\u5728\u5b9a\u4e49\u65f6\u4f7f\u7528\u7684\u662f\u62bd\u8c61\u7c7b\u578b\uff0c\u5728\u8fd0\u884c\u65f6\u518d\u4f20\u5165\u5177\u4f53\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u7531\u5b50\u7c7b\u5bf9\u8c61\u6765\u8986\u76d6\u7236\u7c7b\u5bf9\u8c61 \u63a5\u53e3\u9694\u79bb\u539f\u5219 \u63a5\u53e3\u9694\u79bb\u539f\u5219(Interface Segregation Principle, ISP)\uff1a\u4f7f\u7528\u591a\u4e2a\u4e13\u95e8\u7684\u63a5\u53e3\uff0c\u800c\u4e0d\u4f7f\u7528\u5355\u4e00\u7684\u603b\u63a5\u53e3\uff0c\u5373\u5ba2\u6237\u7aef\u4e0d\u5e94\u8be5\u4f9d\u8d56\u90a3\u4e9b\u5b83\u4e0d\u9700\u8981\u7684\u63a5\u53e3 \u63a5\u53e3\u4ec5\u4ec5\u63d0\u4f9b\u5ba2\u6237\u7aef\u9700\u8981\u7684\u884c\u4e3a\uff0c\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u7684\u884c\u4e3a\u5219\u9690\u85cf\u8d77\u6765\uff0c\u5e94\u5f53\u4e3a\u5ba2\u6237\u7aef\u63d0\u4f9b\u5c3d\u53ef\u80fd\u5c0f\u7684\u5355\u72ec\u7684\u63a5\u53e3\uff0c\u800c\u4e0d\u8981\u63d0\u4f9b\u5927\u7684\u603b\u63a5\u53e3\u3002\u5728\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3\u5c31\u9700\u8981\u5b9e\u73b0\u8be5\u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u56e0\u6b64\u5927\u7684\u603b\u63a5\u53e3\u4f7f\u7528\u8d77\u6765\u4e0d\u4e00\u5b9a\u5f88\u65b9\u4fbf\uff0c\u4e3a\u4e86\u4f7f\u63a5\u53e3\u7684\u804c\u8d23\u5355\u4e00\uff0c\u9700\u8981\u5c06\u5927\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u6839\u636e\u5176\u804c\u8d23\u4e0d\u540c\u5206\u522b\u653e\u5728\u4e0d\u540c\u7684\u5c0f\u63a5\u53e3\u4e2d\uff0c\u4ee5\u786e\u4fdd\u6bcf\u4e2a\u63a5\u53e3\u4f7f\u7528\u8d77\u6765\u90fd\u8f83\u4e3a\u65b9\u4fbf\uff0c\u5e76\u90fd\u627f\u62c5\u67d0\u4e00\u5355\u4e00\u89d2\u8272\u3002\u63a5\u53e3\u5e94\u8be5\u5c3d\u91cf\u7ec6\u5316\uff0c\u540c\u65f6\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u5e94\u8be5\u5c3d\u91cf\u5c11\uff0c\u6bcf\u4e2a\u63a5\u53e3\u4e2d\u53ea\u5305\u542b\u4e00\u4e2a\u5ba2\u6237\u7aef\uff08\u5982\u5b50\u6a21\u5757\u6216\u4e1a\u52a1\u903b\u8f91\u7c7b\uff09\u6240\u9700\u7684\u65b9\u6cd5\u5373\u53ef\uff0c\u8fd9\u79cd\u673a\u5236\u4e5f\u79f0\u4e3a\u201c\u5b9a\u5236\u670d\u52a1\u201d\uff0c\u5373\u4e3a\u4e0d\u540c\u7684\u5ba2\u6237\u7aef\u63d0\u4f9b\u5bbd\u7a84\u4e0d\u540c\u7684\u63a5\u53e3\u3002 \u8fea\u7c73\u7279\u6cd5\u5219 \u4e00\u4e2a\u8f6f\u4ef6\u5b9e\u4f53\u5e94\u5f53\u5c3d\u53ef\u80fd\u5c11\u5730\u4e0e\u5176\u4ed6\u5b9e\u4f53\u53d1\u751f\u76f8\u4e92\u4f5c\u7528\u3002 \u8fea\u7c73\u7279\u6cd5\u5219\u8981\u6c42\u6211\u4eec\u5728\u8bbe\u8ba1\u7cfb\u7edf\u65f6\uff0c\u5e94\u8be5\u5c3d\u91cf\u51cf\u5c11\u5bf9\u8c61\u4e4b\u95f4\u7684\u4ea4\u4e92\uff0c\u5982\u679c\u4e24\u4e2a\u5bf9\u8c61\u4e4b\u95f4\u4e0d\u5fc5\u5f7c\u6b64\u76f4\u63a5\u901a\u4fe1\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u5c31\u4e0d\u5e94\u5f53\u53d1\u751f\u4efb\u4f55\u76f4\u63a5\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u5982\u679c\u5176\u4e2d\u7684\u4e00\u4e2a\u5bf9\u8c61\u9700\u8981\u8c03\u7528\u53e6\u4e00\u4e2a\u5bf9\u8c61\u7684\u67d0\u4e00\u4e2a\u65b9\u6cd5\u7684\u8bdd\uff0c\u53ef\u4ee5\u901a\u8fc7\u7b2c\u4e09\u8005\u8f6c\u53d1\u8fd9\u4e2a\u8c03\u7528\u3002\u7b80\u8a00\u4e4b\uff0c\u5c31\u662f\u901a\u8fc7\u5f15\u5165\u4e00\u4e2a\u5408\u7406\u7684\u7b2c\u4e09\u8005\u6765\u964d\u4f4e\u73b0\u6709\u5bf9\u8c61\u4e4b\u95f4\u7684\u8026\u5408\u5ea6\u3002 \u5728\u5c06\u8fea\u7c73\u7279\u6cd5\u5219\u8fd0\u7528\u5230\u7cfb\u7edf\u8bbe\u8ba1\u4e2d\u65f6\uff0c\u8981\u6ce8\u610f\u4e0b\u9762\u7684\u51e0\u70b9\uff1a\u5728\u7c7b\u7684\u5212\u5206\u4e0a\uff0c\u5e94\u5f53\u5c3d\u91cf\u521b\u5efa\u677e\u8026\u5408\u7684\u7c7b\uff0c\u7c7b\u4e4b\u95f4\u7684\u8026\u5408\u5ea6\u8d8a\u4f4e\uff0c\u5c31\u8d8a\u6709\u5229\u4e8e\u590d\u7528\uff0c\u4e00\u4e2a\u5904\u5728\u677e\u8026\u5408\u4e2d\u7684\u7c7b\u4e00\u65e6\u88ab\u4fee\u6539\uff0c\u4e0d\u4f1a\u5bf9\u5173\u8054\u7684\u7c7b\u9020\u6210\u592a\u5927\u6ce2\u53ca\uff1b\u5728\u7c7b\u7684\u7ed3\u6784\u8bbe\u8ba1\u4e0a\uff0c\u6bcf\u4e00\u4e2a\u7c7b\u90fd\u5e94\u5f53\u5c3d\u91cf\u964d\u4f4e\u5176\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u7684\u8bbf\u95ee\u6743\u9650\uff1b\u5728\u7c7b\u7684\u8bbe\u8ba1\u4e0a\uff0c\u53ea\u8981\u6709\u53ef\u80fd\uff0c\u4e00\u4e2a\u7c7b\u578b\u5e94\u5f53\u8bbe\u8ba1\u6210\u4e0d\u53d8\u7c7b\uff1b\u5728\u5bf9\u5176\u4ed6\u7c7b\u7684\u5f15\u7528\u4e0a\uff0c\u4e00\u4e2a\u5bf9\u8c61\u5bf9\u5176\u4ed6\u5bf9\u8c61\u7684\u5f15\u7528\u5e94\u5f53\u964d\u5230\u6700\u4f4e\u3002 \u63a8\u8bbe\u8ba1\u6a21\u5f0f\u539f\u5219\u8bb2\u89e3\u6bd4\u8f83\u597d\u7684\u6587\u7ae0\u94fe\u63a5\u63a8\u8350 \u8bbe\u8ba1\u6a21\u5f0f\u7684\u4ecb\u7ecd [\u7b2c\u4e00\u7ae0 \u521b\u5efa\u578b\u6a21\u5f0f](#build) ---- - [1.1 \u5de5\u5382\u6a21\u5f0f(\u5de5\u5382\u65b9\u6cd5\u3001\u62bd\u8c61\u5de5\u5382\u3001\u5355\u4f8b\u6a21\u5f0f()\u53ca\u4e09\u8005\u7684\u533a\u522b)](#factory)(\u91cd\u70b9\uff0c) - [1.2 \u5efa\u9020\u8005\u6a21\u5f0f](#Builder)(\u91cd\u70b9\uff0c) - [1.3 \u539f\u578b\u6a21\u5f0f](#Prototype)(\u91cd\u70b9\uff0c) - \u5bf9\u8c61\u6c60\u7684\u6a21\u5f0f - \u60f0\u6027\u8ba1\u7b97\u6a21\u5f0f [\u7b2c\u4e8c\u7ae0 \u7ed3\u6784\u578b\u6a21\u5f0f](#construct) ---- - [2.1 \u9002\u914d\u5668\u6a21\u5f0f](#adopt)(\u975e\u5e38\u91cd\u70b9\uff0c\u5e38\u8003) - [2.2 \u4fee\u9970\u5668\u6a21\u5f0f](#decorator)(\u91cd\u70b9\uff0c\u5e38\u8003) - [2.3 \u5916\u89c2\u6a21\u5f0f](#Facade)(\u91cd\u70b9\uff0c\u5e38\u89c1) - [2.4 \u4eab\u5143\u6a21\u5f0f](#Flyweight)(\u91cd\u70b9\uff0c\u5e38\u89c1) - [2.5 MVC\u6a21\u578b](#mvc)(\u91cd\u70b9) - [2.6 \u4ee3\u7406\u8bbe\u8ba1\u6a21\u5f0f\uff08Proxy design pattern\uff09](#Proxy)(\u975e\u5e38\u91cd\u70b9\uff0c\u5e38\u8003) - \u4fdd\u62a4/\u9632\u62a4\u4ee3\u7406:\u7528\u4e8e\u5bf9\u5904\u7406\u654f\u611f\u4fe1\u606f\u7684\u5bf9\u8c61\u8fdb\u884c\u8bbf\u95ee\u63a7\u5236 - \u8fdc\u7a0b\u4ee3\u7406\uff1a\u4ee3\u8868\u4e00\u4e2a\u6d3b\u8dc3\u4e8e\u8fdc\u7a0b\u4f4d\u7f6e\uff08\u4f8b\u5982\uff0c\u6211\u4eec\u81ea\u5df1\u7684\u8fdc\u7a0b\u670d\u52a1\u5668\u6216\u4e91\u670d\u52a1\uff09\u7684\u5bf9\u8c61 - \u865a\u62df\u4ee3\u7406\uff1a\u5c06\u4e00\u4e2a\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u5ef6\u8fdf\u5230\u771f\u6b63\u9700\u8981\u4f7f\u7528\u65f6\u8fdb\u884c - \u667a\u80fd\uff08\u5f15\u7528\uff09\u4ee3\u7406\uff1a\u901a\u8fc7\u6dfb\u52a0\u5e2e\u52a9\u4fe1\u606f\uff08\u6bd4\u5982\uff0c\u5f15\u7528\u8ba1\u6570\uff09\u6765\u6269\u5c55\u4e00\u4e2a\u5bf9\u8c61\u7684\u884c\u4e3a\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u667a\u80fd\uff08\u5f15\u7528\uff09\u4ee3\u7406 [\u7b2c\u4e09\u7ae0 \u884c\u4e3a\u578b\u6a21\u5f0f](#motion) ---- - [3.1 \u8d23\u4efb\u94fe\u6a21\u5f0f](#Chain) - [3.2 \u547d\u4ee4\u6a21\u5f0f](#Command) - [3.3 \u89e3\u91ca\u5668\u6a21\u5f0f](#Interpreter) - [3.4 \u89c2\u5bdf\u8005\u6a21\u5f0f](#inspect)(\u91cd\u70b9) - [3.5 \u72b6\u6001\u6a21\u5f0f](#State) - [3.6 \u7b56\u7565\u6a21\u5f0f](#Strategy)(\u91cd\u70b9) - [3.7 \u6a21\u677f\u6a21\u5f0f](#template)(\u91cd\u70b9) #### \u7b2c\u4e00\u7ae0 \u521b\u5efa\u578b\u6a21\u5f0f [\u8fd4\u56de\u76ee\u5f55](#content) 1.1.1 \u5de5\u5382\u6a21\u5f0f\u3001\u62bd\u8c61\u5de5\u5382\u3001\u5355\u4f8b\u6a21\u5f0f - \u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\uff1a \u4e00\u4e2a\u62bd\u8c61\u4ea7\u54c1\u7c7b\uff0c\u53ef\u4ee5\u6d3e\u751f\u51fa\u591a\u4e2a\u5177\u4f53\u4ea7\u54c1\u7c7b\u3002 \u4e00\u4e2a\u62bd\u8c61\u5de5\u5382\u7c7b\uff0c\u53ef\u4ee5\u6d3e\u751f\u51fa\u591a\u4e2a\u5177\u4f53\u5de5\u5382\u7c7b\u3002 \u6bcf\u4e2a\u5177\u4f53\u5de5\u5382\u7c7b\u53ea\u80fd\u521b\u5efa\u4e00\u4e2a\u5177\u4f53\u4ea7\u54c1\u7c7b\u7684\u5b9e\u4f8b\u3002 - \u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\uff1a \u591a\u4e2a\u62bd\u8c61\u4ea7\u54c1\u7c7b\uff0c\u6bcf\u4e2a\u62bd\u8c61\u4ea7\u54c1\u7c7b\u53ef\u4ee5\u6d3e\u751f\u51fa\u591a\u4e2a\u5177\u4f53\u4ea7\u54c1\u7c7b\u3002 \u4e00\u4e2a\u62bd\u8c61\u5de5\u5382\u7c7b\uff0c\u53ef\u4ee5\u6d3e\u751f\u51fa\u591a\u4e2a\u5177\u4f53\u5de5\u5382\u7c7b\u3002 \u6bcf\u4e2a\u5177\u4f53\u5de5\u5382\u7c7b\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u5177\u4f53\u4ea7\u54c1\u7c7b\u7684\u5b9e\u4f8b\u3002 - \u533a\u522b\uff1a \u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u53ea\u6709\u4e00\u4e2a\u62bd\u8c61\u4ea7\u54c1\u7c7b\uff0c\u800c\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\u6709\u591a\u4e2a\u3002 \u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u7684\u5177\u4f53\u5de5\u5382\u7c7b\u53ea\u80fd\u521b\u5efa\u4e00\u4e2a\u5177\u4f53\u4ea7\u54c1\u7c7b\u7684\u5b9e\u4f8b\uff0c\u800c\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u3002 - [\u5de5\u5382\u65b9\u6cd5]() - \u4f7f\u7528\u573a\u666f\uff1a\u7b80\u5316\u5bf9\u8c61\u7684\u521b\u5efa - \u4e00\u53e5\u8bdd\u8bf4\u660e\u5de5\u5382\u65b9\u6cd5\uff1a\u5b83\u662f\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5bf9\u4e0d\u540c\u7684\u8f93\u5165\u53c2\u6570\u8fd4\u56de\u4e0d\u540c\u7684\u5bf9\u8c61 - \u8bbe\u8ba1\u601d\u8def\uff1a\u6267\u884c\u5355\u4e2a\u51fd\u6570\uff0c\u4f20\u5165\u4e00\u4e2a\u53c2\u6570\uff08\u63d0\u4f9b\u4fe1\u606f\u8868\u660e\u6211\u4eec\u60f3\u8981\u4ec0\u4e48\uff09\uff0c\u4f46\u5e76\u4e0d\u8981\u6c42\u77e5\u9053\u4efb\u4f55\u5173\u4e8e\u5bf9\u8c61\u5982\u4f55\u5b9e\u73b0\u4ee5\u53ca\u5bf9\u8c61\u6765\u81ea\u54ea\u91cc\u7684\u7ec6\u8282 - \u793a\u4f8b\u4ee3\u7801\uff1a ```python class ZipOperate(object): def __init__(self, filepath): self.path = filepath def upzip(self): print '\u89e3\u538b {} \u6587\u4ef6'.format(self.path) class PdfOperate(object): def __init__(self, filepath): self.path = filepath def read_pdf(self): print '\u8bfb\u53d6 {} \u6587\u4ef6'.format(self.path) class ExcelOperate(object): def __init__(self, filepath): self.path = filepath def input_info(self): print '\u5bfc\u5165 {} \u6587\u4ef6'.format(self.path) def connect_factory(filepath): '''\u5de5\u5382\u65b9\u6cd5''' if filepath.endswith('.zip'): connector = ZipOperate elif filepath.endswith('.pdf'): connector = PdfOperate elif filepath.endswith('.xlxs'): connector = ExcelOperate else: raise ValueError('Cannot connect to {}'.format(filepath)) return connector(filepath) ``` - [\u62bd\u8c61\u5de5\u5382]() - \u4f7f\u7528\u573a\u666f\uff1a\u7b80\u5316\u5bf9\u8c61\u7684\u521b\u5efa - \u4e00\u53e5\u8bdd\u8bf4\u660e\u62bd\u8c61\u5de5\u5382\uff1a\u4e00\u4e2a\u62bd\u8c61\u5de5\u5382\u662f\uff08\u903b\u8f91\u4e0a\u7684\uff09\u4e00\u7ec4\u5de5\u5382\u65b9\u6cd5\uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u5de5\u5382\u65b9\u6cd5\u8d1f\u8d23\u4ea7\u751f\u4e0d\u540c\u79cd\u7c7b\u7684\u5bf9\u8c61 - \u8bbe\u8ba1\u601d\u8def\uff1a\u6267\u884c\u5355\u4e2a\u51fd\u6570\uff0c\u4f20\u5165\u4e00\u4e2a\u53c2\u6570\uff08\u63d0\u4f9b\u4fe1\u606f\u8868\u660e\u6211\u4eec\u60f3\u8981\u4ec0\u4e48\uff09\uff0c\u4f46\u5e76\u4e0d\u8981\u6c42\u77e5\u9053\u4efb\u4f55\u5173\u4e8e\u5bf9\u8c61\u5982\u4f55\u5b9e\u73b0\u4ee5\u53ca\u5bf9\u8c61\u6765\u81ea\u54ea\u91cc\u7684\u7ec6\u8282 ```python class Frog: def __init__(self, name): self.name = name def __str__(self): return self.name def interact_with(self, obstacle): print('{} the Frog encounters {} and {}!'.format(self, obstacle, obstacle.action())) class Bug: def __str__(self): return 'a bug' def action(self): return 'eats it' class FrogWorld: def __init__(self, name): print(self) self.player_name = name def __str__(self): return '\\n\\n\\t------ Frog World -------' def make_character(self): return Frog(self.player_name) def make_obstacle(self): return Bug() class Wizard: def __init__(self, name): self.name = name def __str__(self): return self.name def interact_with(self, obstacle): print('{} the Wizard battles against {} and {}!'.format(self, obstacle, obstacle.action())) class Ork: def __str__(self): return 'an evil ork' def action(self): return 'kills it' class WizardWorld: def __init__(self, name): print(self) self.player_name = name def __str__(self): return '\\n\\n\\t------ Wizard World -------' def make_character(self): return Wizard(self.player_name) def make_obstacle(self): return Ork() class GameEnvironment: def __init__(self, factory): self.hero = factory.make_character() self.obstacle = factory.make_obstacle() def play(self): self.hero.interact_with(self.obstacle) def validate_age(name): try: age = input('Welcome {}. How old are you? '.format(name)) age = int(age) except ValueError as err: print(\"Age {} is invalid, please try again...\".format(age)) return (False, age) return (True, age) def main(): name = input(\"Hello. What's your name? \") valid_input = False while not valid_input: valid_input, age = validate_age(name) game = FrogWorld if age < 18 else WizardWorld environment = GameEnvironment(game(name)) environment.play() if __name__ == '__main__': main() ``` - \u5355\u4f8b\u6a21\u5f0f ```python # \u901a\u8fc7\u7c7b\u7684__new__\u65b9\u6cd5,\u7528instance\u5b58\u50a8\u552f\u4e00\u7684\u793a\u4f8b\u5316\u5bf9\u8c61\uff1a class Singleton(object): __instance = None def __new__(cls, *args, **kwargs): print 'new' if not cls.__instance: # super\u53c2\u6570\u4ee3\u8868\u4eceSingleton\u5f00\u59cb\u67e5\u627eMRO\u4e0b\u4e00\u4e2acls\u7684\u5c5e\u6027\u6216\u8005\u65b9\u6cd5 cls.__instance = super(Singleton, cls).__new__(cls, *args, **kwargs) return cls.__instance # \u901a\u8fc7\u88c5\u9970\u5668\u7f13\u5b58\u5b58\u50a8\u7528\u6765\u5b9e\u4f8b\u5bf9\u8c61\u7684\u7c7b def singleton(cls): _instance = {} @functools.wraps(cls) def wrapper(*args, **kwargs): if cls not in _instance: _instance[cls] = cls(*args, **kwargs) return _instance[cls] return wrapper # \u5143\u7c7b\u5b9e\u73b0\u5355\u4f8b\u7684\u539f\u7406\u662f\u63a7\u5236\u7c7b\u7684\u521b\u5efa\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa\u5e76\u5b58\u50a8 class Singleton(type): _instances = {} def __call__(cls, *args, **kwargs): if cls not in cls._instances: cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs) return cls._instances[cls] class MyClass(object): __metaclass__ = Singleton ``` 1.2 \u5efa\u9020\u8005\u6a21\u5f0f - \u4f7f\u7528\u573a\u666f\uff1a - \u8bbe\u8ba1\u601d\u8def\uff1a - \u793a\u4f8b\u4ee3\u7801\uff1a ```python from enum import Enum import time PizzaProgress = Enum('PizzaProgress', 'queued preparation baking ready') PizzaDough = Enum('PizzaDough', 'thin thick') PizzaSauce = Enum('PizzaSauce', 'tomato creme_fraiche') PizzaTopping = Enum('PizzaTopping', 'mozzarella double_mozzarella bacon ham mushroomsred_onionoregano') STEP_DELAY = 3 # \u8003\u8651\u5230\u8fd9\u662f\u793a\u4f8b\uff0c\u5355\u4f4d\u4e3a\u79d2 class Pizza: def __init__(self, name): self.name = name self.dough = None self.sauce = None self.topping = [] def __str__(self): return self.name def prepare_dough(self, dough): self.dough = dough print('preparing the {} dough of your {}...'.format(self.dough.name, self)) time.sleep(STEP_DELAY) print('done with the {} dough'.format(self.dough.name)) class MargaritaBuilder: def __init__(self): self.pizza = Pizza('margarita') self.progress = PizzaProgress.queued self.baking_time = 5 # \u8003\u8651\u662f\u793a\u4f8b\uff0c\u5355\u4f4d\u4e3a\u79d2 def prepare_dough(self): self.progress = PizzaProgress.preparation self.pizza.prepare_dough(PizzaDough.thin) def add_sauce(self): print('adding the tomato sauce to your margarita...') self.pizza.sauce = PizzaSauce.tomato time.sleep(STEP_DELAY) print('done with the tomato sauce') def add_topping(self): print('adding the topping (double mozzarella, oregano) to your margarita') self.pizza.topping.append([i for i in (PizzaTopping.double_mozzarella, PizzaTopping.oregano)]) time.sleep(STEP_DELAY) print('done with the topping (double mozzarrella, oregano)') def bake(self): self.progress = PizzaProgress.baking print('baking your margarita for {} seconds'.format(self.baking_time)) time.sleep(self.baking_time) self.progress = PizzaProgress.ready print('your margarita is ready') class CreamyBaconBuilder: def __init__(self): self.pizza = Pizza('creamy bacon') self.progress = PizzaProgress.queued self.baking_time = 7 # \u8003\u8651\u662f\u793a\u4f8b\uff0c\u5355\u4f4d\u4e3a\u79d2 def prepare_dough(self): self.progress = PizzaProgress.preparation self.pizza.prepare_dough(PizzaDough.thick) def add_sauce(self): print('adding the cr\u00e8me fra\u00eeche sauce to your creamy bacon') self.pizza.sauce = PizzaSauce.creme_fraiche time.sleep(STEP_DELAY) print('done with the cr\u00e8me fra\u00eeche sauce') def add_topping(self): print('adding the topping (mozzarella, bacon, ham, mushrooms, red onion,oregano) to your creamy baon') self.pizza.topping.append([t for t in (PizzaTopping.mozzarella, PizzaTopping.bacon, PizzaTopping.ham, PizzaTopping.mushrooms, PizzaTopping.red_onion, PizzaTopping.oregano)]) time.sleep(STEP_DELAY) print('done with the topping (mozzarella, bacon, ham, mushrooms, red onion,oregano)') def bake(self): self.progress = PizzaProgress.baking print('baking your creamy bacon for {} seconds'.format(self.baking_time)) time.sleep(self.baking_time) self.progress = PizzaProgress.ready print('your creamy bacon is ready') class Waiter: def __init__(self): self.builder = None def construct_pizza(self, builder): self.builder = builder [step() for step in (builder.prepare_dough, builder.add_sauce, builder.add_topping, builder.bake)] @property def pizza(self): return self.builder.pizza def validate_style(builders): try: pizza_style = input('What pizza would you like, [m]argarita or [c]reamy bacon?') builder = builders[pizza_style]() valid_input = True except KeyError as err: print('Sorry, only margarita (key m) and creamy bacon (key c) are available') return (False, None) return (True, builder) def main(): builders = dict(m=MargaritaBuilder, c=CreamyBaconBuilder) valid_input = False while not valid_input: valid_input, builder = validate_style(builders) print('==============') waiter = Waiter() waiter.construct_pizza(builder) pizza = waiter.pizza print('=====================') print('Enjoy your {}!'.format(pizza)) if __name__ == '__main__': main() ``` 1.3 \u539f\u578b\u6a21\u5f0f - \u4f7f\u7528\u573a\u666f\uff1a\u6211\u4eec\u5df2\u6709\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5e76\u5e0c\u671b\u521b\u5efa\u8be5\u5bf9\u8c61\u7684\u4e00\u4e2a\u5b8c\u6574\u526f\u672c\u65f6\uff0c\u539f\u578b\u6a21\u5f0f\u5c31\u6d3e\u4e0a\u7528\u573a\u4e86 - \u8bbe\u8ba1\u601d\u8def\uff1a\u539f\u578b\u8bbe\u8ba1\u6a21\u5f0f\uff08Prototype design pattern\uff09\u5e2e\u52a9\u6211\u4eec\u521b\u5efa\u5bf9\u8c61\u7684\u514b\u9686\uff0c\u5176\u6700\u7b80\u5355\u7684\u5f62\u5f0f\u5c31\u662f\u4e00\u4e2aclone()\u51fd\u6570\uff0c\u63a5\u53d7\u4e00\u4e2a\u5bf9\u8c61\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\uff0c\u8fd4\u56de\u8f93\u5165\u5bf9\u8c61\u7684\u4e00\u4e2a\u526f\u672c - \u793a\u4f8b\u4ee3\u7801\uff1a ```python ``` #### \u7b2c\u4e8c\u7ae0 \u7ed3\u6784\u578b\u6a21\u5f0f [\u8fd4\u56de\u76ee\u5f55](#content) 2.1 \u9002\u914d\u5668\u6a21\u578b - \u9075\u5b88\u7684\u8bbe\u8ba1\u539f\u5219\uff1a\u5f00\u653e/\u5c01\u95ed\u539f\u5219\uff0c\u5bf9\u6269\u5c55\u662f\u5f00\u653e\u7684\uff0c\u5bf9\u4fee\u6539\u5219\u662f\u5c01\u95ed\u7684 - \u4e0d\u540c\u65b9\u6cd5\u5b9e\u73b0\u9002\u914d\u5668\u6a21\u5f0f\u7684\u793a\u4f8b\u4ee3\u7801\uff1a - \u4f7f\u7528\u4e86\u7c7b\u7684\u5185\u90e8\u5b57\u5178\u5b9e\u73b0\u9002\u914d\u5668 ```python class Synthesizer: def __init__(self, name): self.name = name def __str__(self): return 'the {} synthesizer'.format(self.name) def play(self): return 'is playing an electronic song' class Human: def __init__(self, name): self.name = name def __str__(self): return '{} the human'.format(self.name) def speak(self): return 'says hello' class Computer: def __init__(self, name): self.name = name def __str__(self): return 'the {} computer'.format(self.name) def execute(self): return 'executes a program' class Adapter: def __init__(self, obj, adapted_methods): self.obj = obj # print(adapted_methods) # print(self.__dict__) print(self.__dict__.update(adapted_methods)) # print(self.__dict__) # \u5b9a\u4e49\u6b64\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8bbf\u95ee\u540e\u7eed\u7684i.name\uff0c # \u8fd9\u662f__getattr__\u7684\u5f88\u91cd\u8981\u7684\u7528\u6cd5 def __getattr__(self, item): return getattr(self.obj, item) def __str__(self): return str(self.obj) def main(): objects = [Computer('Asus')] synth = Synthesizer('moog') objects.append(Adapter(synth, dict(execute=synth.play))) human = Human('Bob') objects.append(Adapter(human, dict(execute=human.speak))) for i in objects: print('{} {}'.format(str(i), i.execute())) print(i.name) if __name__ == \"__main__\": main() ``` - \u4f7f\u7528\u7ee7\u627f\u5b9e\u73b0\u9002\u914d\u5668 - \u4e0d\u540c\u65b9\u6cd5\u7684\u7279\u70b9 \u4f18\u7f3a\u70b9 - \u4e3b\u8981\u8bbe\u8ba1\u601d\u8def\uff1a - \u4ee3\u7801\u793a\u4f8b\uff1a ```python class Synthesizer: def __init__(self, name): self.name = name def __str__(self): return 'the {} synthesizer'.format(self.name) def play(self): return 'is playing an electronic song' class Human: def __init__(self, name): self.name = name def __str__(self): return '{} the human'.format(self.name) def speak(self): return 'says hello' class Computer: def __init__(self, name): self.name = name def __str__(self): return 'the {} computer'.format(self.name) def execute(self): return 'executes a program' class Adapter: def __init__(self, obj, adapted_methods): self.obj = obj # print(adapted_methods) # print(self.__dict__) print(self.__dict__.update(adapted_methods)) # print(self.__dict__) def __getattr__(self, item): return getattr(self.obj, item) def __str__(self): return str(self.obj) def main(): objects = [Computer('Asus')] synth = Synthesizer('moog') objects.append(Adapter(synth, dict(execute=synth.play))) human = Human('Bob') objects.append(Adapter(human, dict(execute=human.speak))) for i in objects: print('{} {}'.format(str(i), i.execute())) print(i.name) if __name__ == \"__main__\": main() ``` [\u8fd4\u56de\u76ee\u5f55\uff1a\u4fee\u9970\u5668\u6a21\u5f0f\u975e\u5e38\u91cd\u8981](#content) 2.2 \u4fee\u9970\u5668\u6a21\u578b - \u7528\u4e00\u53e5\u8bdd\u89e3\u91ca\u88c5\u9970\u5668\u6a21\u5f0f\uff1a - \u4fee\u9970\u5668\u6a21\u5f0f\u80fd\u591f\u4ee5\u900f\u660e\u7684\u65b9\u5f0f\uff08\u4e0d\u5f71\u54cd\u5176\u4ed6\u5bf9\u8c61\uff09\u52a8\u6001\u5730\u5c06\u529f\u80fd\u6dfb\u52a0\u5230\u4e00\u4e2a\u5bf9\u8c61\u4e2d - \u9075\u5b88\u7684\u8bbe\u8ba1\u539f\u5219\uff1a - \u5bf9\u4e00\u4e2a\u5bf9\u8c61\u6dfb\u52a0\u989d\u5916\u7684\u529f\u80fd\u7684\u65b9\u6cd5\u6709\uff1a - \u76f4\u63a5\u5c06\u529f\u80fd\u6dfb\u52a0\u5230\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b - \u7ec4\u5408:\u7ec4\u5408\u4f18\u4e8e\u7ee7\u627f - \u7ee7\u627f - \u4fee\u9970\u5668 - \u4f7f\u7528\u7684\u573a\u666f\uff1a\u7f13\u5b58\uff0c\u6027\u80fd\u6d4b\u8bd5\uff0c\u6743\u9650\u8ba4\u8bc1\uff0c\u4e8b\u52a1\u5904\u7406, \u63d2\u5165\u65e5\u5fd7 - \u4e3b\u8981\u8bbe\u8ba1\u601d\u8def\uff1a - \u4ee3\u7801\u793a\u4f8b\uff1a - \u7f13\u5b58 ```python # \u6590\u6ce2\u90a3\u5951\u6570\u5217, \u4ee5\u4e0b\u65b9\u6cd5\u8ba1\u7b97\u6bd4\u8f83\u8017\u65f6 def fibonacci(n): assert (n >= 0), 'n must be >= 0' return n if n in (0, 1) else fibonacci(n - 1) + fibonacci(n - 2) if __name__ == '__main__': from timeit import Timer t = Timer('fibonacci(8)', 'from __main__ import fibonacci') print(t.timeit()) # 19.1498459 # \u4f7f\u7528\u5b57\u5178\u7f13\u5b58\u8ba1\u7b97\u7ed3\u679c\u8fdb\u884c\u8ba1\u7b97\u63d0\u901f known = {0: 0, 1: 1} def fibonacci(n): assert (n >= 0), 'n must be >= 0' if n in known: return known[n] res = fibonacci(n - 1) + fibonacci(n - 2) known[n] = res return res if __name__ == '__main__': from timeit import Timer t = Timer('fibonacci(100)', 'from __main__ import fibonacci') print(t.timeit()) # 0.4535593 # \u4f7f\u7528\u88c5\u9970\u5668\u8fdb\u884c\u4f18\u5316\uff1a import functools def memoize(fn): known = dict() @functools.wraps(fn) def memoizer(*args): if args not in known: known[args] = fn(*args) return known[args] return memoizer @memoize def fibonacci(n): '''\u8fd4\u56de\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2cn\u4e2a\u6570''' assert (n >= 0), 'n must be >= 0' return n if n in (0, 1) else fibonacci(n - 1) + fibonacci(n - 2) if __name__ == '__main__': from timeit import Timer measure = [{'exec': 'fibonacci(100)', 'import': 'fibonacci','func': fibonacci}] for m in measure: t = Timer('{}'.format(m['exec']), 'from __main__ import {}'.format(m['import'])) print('name: {}, doc: {}, executing: {}, time:{}'.format(m['func'].__name__, m['func'].__doc__, m['exec'], t.timeit())) # name: fibonacci, doc: \u8fd4\u56de\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2cn\u4e2a\u6570, executing: fibonacci(100), time:0.4526535 ``` - \u6027\u80fd\u6d4b\u8bd5 ```python def timethis(func): @wraps(func) def wrapper(*args, **kwargs): start = time.time() r = func(*args, **kwargs) end = time.time() print('{}.{} : {}'.format(func.__module__, func.__name__, end - start)) return r return wrapper @timethis def countdown(n): while n > 0: n -= 1 ``` - \u6743\u9650\u9a8c\u8bc1 [\u8fd4\u56de\u76ee\u5f55](#content) 2.3 \u5916\u89c2\u6a21\u5f0f - \u9075\u5b88\u7684\u8bbe\u8ba1\u539f\u5219\uff1a - \u4f7f\u7528\u7684\u573a\u666f\uff1a 1. \u7cfb\u7edf\u5305\u542b\u591a\u5c42\uff0c\u5916\u89c2\u6a21\u5f0f\u4e5f\u80fd\u6d3e\u4e0a\u7528\u573a\u3002\u4f60\u53ef\u4ee5\u4e3a\u6bcf\u4e00\u5c42\u5f15\u5165\u4e00\u4e2a\u5916\u89c2\u5165\u53e3\u70b9\uff0c\u5e76\u8ba9\u6240\u6709\u5c42\u7ea7\u901a\u8fc7\u5b83\u4eec\u7684\u5916\u89c2\u76f8\u4e92\u901a\u4fe1\u3002\u8fd9\u63d0\u9ad8\u4e86\u5c42\u7ea7\u4e4b\u95f4\u7684\u677e\u8026\u5408\u6027\uff0c\u5c3d\u53ef\u80fd\u4fdd\u6301\u5c42\u7ea7\u72ec\u7acb - \u4e3b\u8981\u8bbe\u8ba1\u601d\u8def\uff1a\u5916\u89c2\u8bbe\u8ba1\u6a21\u5f0f\u6709\u52a9\u4e8e\u9690\u85cf\u7cfb\u7edf\u7684\u5185\u90e8\u590d\u6742\u6027\uff0c\u5e76\u901a\u8fc7\u4e00\u4e2a\u7b80\u5316\u7684\u63a5\u53e3\u5411\u5ba2\u6237\u7aef\u66b4\u9732\u5fc5\u8981\u7684\u90e8\u5206 - \u4ee3\u7801\u793a\u4f8b\uff1a ```python from enum import Enum from abc import ABCMeta, abstractmethod State = Enum('State', 'new running sleeping restart zombie') class User: pass class Process: pass class File: pass class Server(metaclass=ABCMeta): @abstractmethod def __init__(self): pass def __str__(self): return self.name @abstractmethod def boot(self): pass @abstractmethod def kill(self, restart=True): pass class FileServer(Server): def __init__(self): '''\u521d\u59cb\u5316\u6587\u4ef6\u670d\u52a1\u8fdb\u7a0b\u8981\u6c42\u7684\u64cd\u4f5c''' self.name = 'FileServer' self.state = State.new def boot(self): print('booting the {}'.format(self)) '''\u542f\u52a8\u6587\u4ef6\u670d\u52a1\u8fdb\u7a0b\u8981\u6c42\u7684\u64cd\u4f5c''' self.state = State.running def kill(self, restart=True): print('Killing {}'.format(self)) '''\u7ec8\u6b62\u6587\u4ef6\u670d\u52a1\u8fdb\u7a0b\u8981\u6c42\u7684\u64cd\u4f5c''' self.state = State.restart if restart else State.zombie def create_file(self, user, name, permissions): '''\u68c0\u67e5\u8bbf\u95ee\u6743\u9650\u7684\u6709\u6548\u6027\u3001\u7528\u6237\u6743\u9650\u7b49''' print(\"trying to create the file '{0}' for user '{1}' with permissions{2}\".format(name, user, permissions)) class ProcessServer(Server): def __init__(self): '''\u521d\u59cb\u5316\u8fdb\u7a0b\u670d\u52a1\u8fdb\u7a0b\u8981\u6c42\u7684\u64cd\u4f5c''' self.name = 'ProcessServer' self.state = State.new def boot(self): print('booting the {}'.format(self)) '''\u542f\u52a8\u8fdb\u7a0b\u670d\u52a1\u8fdb\u7a0b\u8981\u6c42\u7684\u64cd\u4f5c''' self.state = State.running def kill(self, restart=True): print('Killing {}'.format(self)) '''\u7ec8\u6b62\u8fdb\u7a0b\u670d\u52a1\u8fdb\u7a0b\u8981\u6c42\u7684\u64cd\u4f5c''' self.state = State.restart if restart else State.zombie def create_process(self, user, name): '''\u68c0\u67e5\u7528\u6237\u6743\u9650\u548c\u751f\u6210PID\u7b49''' print(\"trying to create the process '{}' for user '{}'\".format(name, user)) class WindowServer: pass class NetworkServer: pass class OperatingSystem: '''\u5916\u89c2''' def __init__(self): self.fs = FileServer() self.ps = ProcessServer() def start(self): [i.boot() for i in (self.fs, self.ps)] def create_file(self, user, name, permissions): return self.fs.create_file(user, name, permissions) def create_process(self, user, name): return self.ps.create_process(user, name) def main(): os = OperatingSystem() os.start() os.create_file('foo', 'hello', '-rw-r-r') os.create_process('bar', 'ls /tmp') if __name__ == '__main__': main() ``` [\u8fd4\u56de\u76ee\u5f55](#content) 2.4 \u4eab\u5143\u6a21\u5f0f - \u9075\u5b88\u7684\u8bbe\u8ba1\u539f\u5219\uff1a - \u4f7f\u7528\u7684\u573a\u666f\uff1a\u4eab\u5143\u6a21\u5f0f\u662f\u4e00\u4e2a\u7528\u4e8e\u4f18\u5316\u6027\u80fd\u548c\u5185\u5b58\u4f7f\u7528\u7684\u8bbe\u8ba1\u6a21\u5f0f - \u4e3b\u8981\u8bbe\u8ba1\u601d\u8def\uff1a\u4eab\u5143\u8bbe\u8ba1\u6a21\u5f0f\u901a\u8fc7\u4e3a\u76f8\u4f3c\u5bf9\u8c61\u5f15\u5165\u6570\u636e\u5171\u4eab\u6765\u6700\u5c0f\u5316\u5185\u5b58\u4f7f\u7528\uff0c\u63d0\u5347\u6027\u80fd\u3002\u4e00\u4e2a\u4eab\u5143\uff08Flyweight\uff09\u5c31\u662f\u4e00\u4e2a\u5305\u542b\u72b6\u6001\u72ec\u7acb\u7684\u4e0d\u53ef\u53d8\uff08\u53c8\u79f0\u56fa\u6709\u7684\uff09\u6570\u636e\u7684\u5171\u4eab\u5bf9\u8c61\u3002\u4f9d\u8d56\u72b6\u6001\u7684\u53ef\u53d8\uff08\u53c8\u79f0\u975e\u56fa\u6709\u7684\uff09\u6570\u636e\u4e0d\u5e94\u662f\u4eab\u5143\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5bf9\u8c61\u7684\u8fd9\u79cd\u4fe1\u606f\u90fd\u4e0d\u540c\uff0c\u65e0\u6cd5\u5171\u4eab\u3002\u5982\u679c\u4eab\u5143\u9700\u8981\u975e\u56fa\u6709\u7684\u6570\u636e\uff0c\u5e94\u8be5\u7531\u5ba2\u6237\u7aef\u4ee3\u7801\u663e\u5f0f\u5730\u63d0\u4f9b - \u4ee3\u7801\u793a\u4f8b\uff1a ```python from enum import Enum import random TreeType = Enum('TreeType', 'apple_tree cherry_tree peach_tree') # print(TreeType.apple_tree.value) # print(TreeType.cherry_tree.value) class Tree: pool = dict() def __new__(cls, tree_type): obj = cls.pool.get(tree_type, None) if not obj: print('{0}\u4e0d\u5b58\u5728'.format(tree_type)) obj = object.__new__(cls) cls.pool[tree_type] = obj print(cls.pool) obj.tree_type = tree_type else: print('{0}\u5df2\u5b58\u5728'.format(tree_type)) return obj def render(self, age, x, y): print('render a tree of type {} and age {} at ({}, {})'.format(self.tree_type, age, x, y)) def main(): rnd = random.Random() age_min, age_max = 1, 30 # \u5355\u4f4d\u4e3a\u5e74 min_point, max_point = 0, 100 tree_counter = 0 for _ in range(10): t1 = Tree(TreeType.apple_tree) t1.render(rnd.randint(age_min, age_max), rnd.randint(min_point, max_point), rnd.randint(min_point, max_point)) tree_counter += 1 for _ in range(3): t2 = Tree(TreeType.cherry_tree) t2.render(rnd.randint(age_min, age_max), rnd.randint(min_point, max_point), rnd.randint(min_point, max_point)) tree_counter += 1 for _ in range(5): t3 = Tree(TreeType.peach_tree) t3.render(rnd.randint(age_min, age_max), rnd.randint(min_point, max_point), rnd.randint(min_point, max_point)) tree_counter += 1 print('trees rendered: {}'.format(tree_counter)) print('trees actually created: {}'.format(len(Tree.pool))) t4 = Tree(TreeType.cherry_tree) t5 = Tree(TreeType.cherry_tree) t6 = Tree(TreeType.apple_tree) print('{} == {}? {}'.format(id(t4), id(t5), id(t4) == id(t5))) print('{} == {}? {}'.format(id(t5), id(t6), id(t5) == id(t6))) if __name__ == '__main__': main() ``` [\u8fd4\u56de\u76ee\u5f55](#content) 2.5 MVC\u6a21\u578b - \u6982\u5ff5\uff1a\u6a21\u578b-\u89c6\u56fe-\u63a7\u5236\u5668 [\u8fd4\u56de\u76ee\u5f55](#content) 2.6 \u4ee3\u7406\u8bbe\u8ba1\u6a21\u5f0f - \u4f7f\u7528\u7684\u573a\u666f - \u8bbe\u8ba1\u601d\u8def\uff1a - \u4ee3\u7801\u793a\u4f8b\uff1a ```python class SensitiveInfo: def __init__(self): self.users = ['nick', 'tom', 'ben', 'mike'] def read(self): print('There are {} users: {}'.format(len(self.users), ' '.join(self.users))) def add(self, user): self.users.append(user) print('Added user {}'.format(user)) class Info: def __init__(self): self.protected = SensitiveInfo() self.secret = '0xdeadbeef' def read(self): self.protected.read() def add(self, user): sec = input('what is the secret? ') self.protected.add(user) if sec == self.secret else print(\"That's wrong!\") def main(): info = Info() while True: print('1. read list |==| 2. add user |==| 3. quit') key = input('choose option: ') if key == '1': info.read() elif key == '2': name = input('choose username: ') info.add(name) elif key == '3': exit() else: print('unknown option: {}'.format(key)) # \u6b64\u6a21\u5f0f\u9700\u8981\u4f18\u5316\uff0c\u5b58\u5728\u7f3a\u9677 if __name__ == '__main__': main() ``` #### \u884c\u4e3a\u578b\u6a21\u5f0f [\u8fd4\u56de\u76ee\u5f55](#motion) 3.1 \u8d23\u4efb\u94fe\u6a21\u5f0f - \u4f7f\u7528\u7684\u573a\u666f\uff1a - \u4e3b\u8981\u8bbe\u8ba1\u601d\u8def\uff1a - \u4ee3\u7801\u793a\u4f8b\uff1a ```python ``` [\u8fd4\u56de\u76ee\u5f55](#motion) 3.2 \u547d\u4ee4\u6a21\u5f0f - \u4f7f\u7528\u7684\u573a\u666f\uff1a - \u4e3b\u8981\u8bbe\u8ba1\u601d\u8def\uff1a - \u4ee3\u7801\u793a\u4f8b\uff1a ```python import os verbose = True class RenameFile: def __init__(self, path_src, path_dest): self.src, self.dest = path_src, path_dest def execute(self): if verbose: print(\"[renaming '{}' to '{}']\".format(self.src, self.dest)) os.rename(self.src, self.dest) def undo(self): if verbose: print(\"[renaming '{}' back to '{}']\".format(self.dest, self.src)) os.rename(self.dest, self.src) class CreateFile: def __init__(self, path, txt='hello world\\n'): self.path, self.txt = path, txt def execute(self): if verbose: print(\"[creating file '{}']\".format(self.path)) with open(self.path, mode='w') as out_file: out_file.write(self.txt) def undo(self): delete_file(self.path) class ReadFile: def __init__(self, path): self.path = path def execute(self): if verbose: print(\"[reading file '{}']\".format(self.path)) with open(self.path, mode='r') as in_file: print(in_file.read()) def delete_file(path): if verbose: print(\"deleting file '{}'\".format(path)) os.remove(path) def main(): orig_name, new_name = 'file1', 'file2' commands = [] for cmd in CreateFile(orig_name), ReadFile(orig_name), RenameFile(orig_name, new_name): commands.append(cmd) [c.execute() for c in commands] answer = input('reverse the executed commands? [y/n] ') if answer not in 'yY': print(\"the result is {}\".format(new_name)) exit() for c in reversed(commands): try: c.undo() except AttributeError as e: pass if __name__ == \"__main__\": main() ``` [\u8fd4\u56de\u76ee\u5f55](#motion) 3.3 \u89e3\u91ca\u5668\u6a21\u5f0f \u8fd9\u91cc\u6682\u4e0d\u4ecb\u7ecd - \u4f7f\u7528\u7684\u573a\u666f\uff1a\u89e3\u91ca\u5668\uff08Interpreter\uff09\u6a21\u5f0f\u4ec5\u80fd\u5f15\u8d77\u5e94\u7528\u7684\u9ad8\u7ea7\u7528\u6237\u7684\u5174\u8da3 - \u4e3b\u8981\u8bbe\u8ba1\u601d\u8def\uff1a - \u4ee3\u7801\u793a\u4f8b\uff1a ```python ``` [\u8fd4\u56de\u76ee\u5f55](#motion) 3.4 \u89c2\u5bdf\u8005\u6a21\u5f0f - \u4f7f\u7528\u7684\u573a\u666f\uff1a\u6d88\u606f\u53d1\u5e03 \u8ba2\u9605 - \u4e00\u53e5\u8bdd\u8bf4\u660e\u89c2\u5bdf\u8005\u6a21\u5f0f\uff1a\u88ab\u89c2\u5bdf\u8005\u88ab\u591a\u4e2a\u89c2\u5bdf\u8005\u89c2\u5bdf\u7740\uff0c\u88ab\u89c2\u5bdf\u8005\u6709\u53d8\u5316\uff0c\u5219\u4f1a\u5904\u53d1\u5bfc\u81f4\u6240\u6709\u89c2\u5bdf\u8005\u4e5f\u53d8\u5316 - \u4e3b\u8981\u8bbe\u8ba1\u601d\u8def\uff1a - \u4ee3\u7801\u793a\u4f8b\uff1a ```python class Publisher: def __init__(self): self.observers = [] def add(self, observer): if observer not in self.observers: self.observers.append(observer) else: print('Failed to add: {}'.format(observer)) def remove(self, observer): try: self.observers.remove(observer) except ValueError: print('Failed to remove: {}'.format(observer)) def notify(self): print('notify') [o.notify(self) for o in self.observers] class DefaultFormatter(Publisher): def __init__(self, name): Publisher.__init__(self) self.name = name self._data = 0 def __str__(self): return \"{}: '{}' has data = {}\".format(type(self).__name__, self.name, self._data) @property def data(self): return self._data @data.setter def data(self, new_value): try: self._data = int(new_value) except ValueError as e: print('Error: {}'.format(e)) else: self.notify() class HexFormatter: def notify(self, publisher): print(\"{}: '{}' has now hex data = {}\".format(type(self).__name__, publisher.name, hex(publisher.data))) class BinaryFormatter: def notify(self, publisher): print(\"{}: '{}' has now bin data = {}\".format(type(self).__name__, publisher.name, bin(publisher.data))) def main(): df = DefaultFormatter('test1') print(df) print('==========================') hf = HexFormatter() df.add(hf) hf2 = HexFormatter() df.add(hf2) df.data = 3 # df.data = 5 # print(df.observers) # print('==========================') # bf = BinaryFormatter() # df.add(bf) # df.data = 21 # print(df) # print('==========================') # df.remove(hf) # df.data = 40 # print(df) # print('==========================') # df.remove(hf) # df.add(bf) # df.data = 'hello' # print(df) # print('==========================') # df.data = 15.8 # print(df) if __name__ == '__main__': main() ``` [\u8fd4\u56de\u76ee\u5f55](#motion) 3.5 \u72b6\u6001\u6a21\u5f0f State design pattern - \u4f7f\u7528\u7684\u573a\u666f\uff1a\u975e\u8ba1\u7b97\u673a\u7684\u4f8b\u5b50\u5305\u62ec\u81ea\u52a8\u552e\u8d27\u673a\u3001\u7535\u68af\u3001\u4ea4\u901a\u706f\u3001 \u6697\u7801\u9501\u3001\u505c\u8f66\u8ba1\u65f6\u5668\u3001\u81ea\u52a8\u52a0\u6cb9\u6cf5\u53ca\u81ea\u7136\u8bed\u8a00\u6587\u6cd5\u63cf\u8ff0\u3002\u8ba1\u7b97\u673a\u65b9\u9762\u7684\u4f8b\u5b50\u5305\u62ec\u6e38\u620f\u7f16\u7a0b\u548c\u8ba1\u7b97\u673a\u7f16\u7a0b\u7684\u5176\u4ed6\u9886\u57df\u3001\u786c\u4ef6\u8bbe\u8ba1\u3001\u534f\u8bae\u8bbe\u8ba1\uff0c\u4ee5\u53ca\u7f16\u7a0b\u8bed\u8a00\u89e3\u6790 - \u4e3b\u8981\u8bbe\u8ba1\u601d\u8def\uff1a\u5728\u4e00\u4e2a\u4e8b\u4ef6\u9a71\u52a8\u7cfb\u7edf\u4e2d\uff0c\u4ece\u4e00\u4e2a\u72b6\u6001\u8f6c\u6362\u5230\u53e6\u4e00\u4e2a\u72b6\u6001\u4f1a\u89e6\u53d1\u4e00\u4e2a\u4e8b\u4ef6/\u6d88\u606f\u3002\u72b6\u6001\u8bbe\u8ba1\u6a21\u5f0f\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u7236State\u7c7b\u548c\u8bb8\u591a\u6d3e\u751f\u7684ConcreteState\u7c7b\u6765\u5b9e\u73b0\uff0c\u7236\u7c7b\u5305\u542b\u6240\u6709\u72b6\u6001\u5171\u540c\u7684\u529f\u80fd\uff0c\u6bcf\u4e2a\u6d3e\u751f\u7c7b\u5219\u4ec5\u5305\u542b\u7279\u5b9a\u72b6\u6001\u8981\u6c42\u7684\u529f\u80fd\u3002\u72b6\u6001\u6a21\u5f0f\u5173\u6ce8\u7684\u662f\u5b9e\u73b0\u4e00\u4e2a\u72b6\u6001\u673a\uff0c\u72b6\u673a \u7684\u6838\u5fc3\u90e8\u5206\u662f\u72b6\u6001\u548c\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u6362 - \u4ee3\u7801\u793a\u4f8b\uff1a ```python ``` [\u8fd4\u56de\u76ee\u5f55](#motion) 3.6 \u7b56\u7565\u6a21\u5f0f - \u4f7f\u7528\u7684\u573a\u666f\u793a\u4f8b\uff1a 1. \u4f7f\u7528\u767e\u5ea6\u53bb\u673a\u573a\u6709\u4e0d\u540c\u7684\u8def\u7ebf\uff0c\u57fa\u4e8e\u4e0d\u540c\u7684\u9700\u6c42\u8003\u91cf\u63d0\u4f9b\u4e0d\u540c\u7684\u8def\u7ebf - \u4e3b\u8981\u7684\u8bbe\u8ba1\u601d\u8def\uff1a 1. \u4f7f\u7528\u591a\u79cd\u7b97\u6cd5\u6765\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\uff0c\u5176\u6740\u624b\u7ea7\u7279\u6027\u662f\u80fd\u591f\u5728\u8fd0\u884c\u65f6\u900f\u660e\u5730\u5207\u6362\u7b97\u6cd5\uff08\u5ba2\u6237\u7aef\u4ee3\u7801\u5bf9\u53d8\u5316\u65e0\u611f\u77e5\uff09 - \u5bf9\u6bd4\u8fdb\u884c\u66f4\u597d\u7684\u7406\u89e3\uff1a\u4e0e\u5de5\u5382\u6a21\u5f0f(\u5de5\u5382\u65b9\u6cd5\u4e0e\u62bd\u8c61\u5de5\u5382)\u8fdb\u884c\u5bf9\u6bd4 - \u4e0d\u540c\u7684\u5b57\u7b26\u957f\u5ea6\uff0c\u901a\u8fc7\u4e0d\u540c\u7684\u7b97\u6cd5\u7b56\u7565\u8fd4\u56de\u662f\u5426\u5b57\u6bcd\u5355\u4e00\uff0c\u4ee3\u7801\u793a\u4f8b ```PYTHON import time SLOW = 3 # \u5355\u4f4d\u4e3a\u79d2 LIMIT = 5 # \u5b57\u7b26\u6570 WARNING = 'too bad, you picked the slow algorithm :(' def pairs(seq): n = len(seq) for i in range(n): yield seq[i], seq[(i + 1) % n] def allUniqueSort(s): if len(s) > LIMIT: print(WARNING) time.sleep(SLOW) srtStr = sorted(s) for (c1, c2) in pairs(srtStr): if c1 == c2: return False return True def allUniqueSet(s): if len(s) < LIMIT: print(WARNING) time.sleep(SLOW) return True if len(set(s)) == len(s) else False def allUnique(s, strategy): return strategy(s) def main(): while True: word = None while not word: word = input('Insert word (type quit to exit)> ') if word == 'quit': print('bye') return strategy_picked = None strategies = {'1': allUniqueSet, '2': allUniqueSort} while strategy_picked not in strategies.keys(): strategy_picked = input('Choose strategy: [1] Use a set, [2] Sort andpair> ') try: strategy = strategies[strategy_picked] print('allUnique({}): {}'.format(word, allUnique(word, strategy))) except KeyError as err: print('Incorrect option: {}'.format(strategy_picked)) print() if __name__ == '__main__': main() ``` [\u8fd4\u56de\u76ee\u5f55](#motion) ## \u4f18\u79c0\u8d44\u6e90 - [\u5173\u4e8e\u8bbe\u8ba1\u6a21\u5f0f\u4f18\u79c0\u8d44\u6e90](https://blog.csdn.net/LoveLion/article/category/738450/7) - [\u4e66\u7c4d\u8d44\u6599(\u6e05\u5355\uff1a\uff0c\u5bc6\u7801\uff1a)](\u767e\u5ea6\u94fe\u63a5)","title":"Python design"},{"location":"python-design-patterns/python-design/#_1","text":"\u5b66\u4e60\u8bbe\u8ba1\u6a21\u5f0f\u7684\u65f6\u673a\u4e0e\u6280\u5de7 \u8bbe\u8ba1\u6a21\u5f0f\u7684\u539f\u5219 \u591a\u4e2a\u8bbe\u8ba1\u6a21\u5f0f\u7684\u4ecb\u7ecd \u5b9e\u6218\u9879\u76ee\u4e0e\u8003\u9898\u7406\u89e3\u8bbe\u8ba1\u6a21\u5f0f \u5173\u4e8e\u8bbe\u8ba1\u6a21\u5f0f\u4f18\u79c0\u8d44\u6e90(\u4f18\u79c0\u6587\u7ae0\u8d44\u6e90\u53ca\u76f8\u5173\u4e66\u7c4d\u63a8\u8350)","title":"\u76ee\u5f55"},{"location":"python-design-patterns/python-design/#_2","text":"\u5efa\u8bae\u5728\u6ca1\u6709\u8db3\u591f\u9879\u76ee\u7ecf\u9a8c\u65f6\u53ef\u4ee5\u5148\u8fc7\u4e00\u904d\uff0c\u4e86\u89e3\u57fa\u672c\u7684\u6982\u5ff5 \u5f53\u79ef\u7d2f\u4e00\u4e9b\u5de5\u4f5c\u7ecf\u9a8c\u540e\uff0c\u53ef\u4ee5\u6311\u9009\u5e38\u89c1\u91cd\u70b9\u8bbe\u8ba1\u6a21\u5f0f\u8fdb\u884c\u7406\u89e3\u5e76\u53ef\u4ee5\u9009\u62e9\u5386\u5e74\u7684\u8003\u9898\u4e0e\u9879\u76ee\u52a0\u6df1\u7406\u89e3","title":"\u5b66\u4e60\u8bbe\u8ba1\u6a21\u5f0f\u7684\u65f6\u673a\u4e0e\u6280\u5de7"},{"location":"python-design-patterns/python-design/#_3","text":"\u5355\u4e00\u804c\u8d23\u539f\u5219 \u5355\u4e00\u804c\u8d23\u539f\u5219(Single Responsibility Principle, SRP)\uff1a\u4e00\u4e2a\u7c7b\u53ea\u8d1f\u8d23\u4e00\u4e2a\u529f\u80fd\u9886\u57df\u4e2d\u7684\u76f8\u5e94\u804c\u8d23\uff0c\u6216\u8005\u53ef\u4ee5\u5b9a\u4e49\u4e3a\uff1a\u5c31\u4e00\u4e2a\u7c7b\u800c\u8a00\uff0c\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a\u5f15\u8d77\u5b83\u53d8\u5316\u7684\u539f\u56e0\u3002 \u5355\u4e00\u804c\u8d23\u539f\u5219\u544a\u8bc9\u6211\u4eec\uff1a\u4e00\u4e2a\u7c7b\u4e0d\u80fd\u592a\u201c\u7d2f\u201d\uff01\u5728\u8f6f\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u4e00\u4e2a\u7c7b\uff08\u5927\u5230\u6a21\u5757\uff0c\u5c0f\u5230\u65b9\u6cd5\uff09\u627f\u62c5\u7684\u804c\u8d23\u8d8a\u591a\uff0c\u5b83\u88ab\u590d\u7528\u7684\u53ef\u80fd\u6027\u5c31\u8d8a\u5c0f\uff0c\u800c\u4e14\u4e00\u4e2a\u7c7b\u627f\u62c5\u7684\u804c\u8d23\u8fc7\u591a\uff0c\u5c31\u76f8\u5f53\u4e8e\u5c06\u8fd9\u4e9b\u804c\u8d23\u8026\u5408\u5728\u4e00\u8d77\uff0c\u5f53\u5176\u4e2d\u4e00\u4e2a\u804c\u8d23\u53d8\u5316\u65f6\uff0c\u53ef\u80fd\u4f1a\u5f71\u54cd\u5176\u4ed6\u804c\u8d23\u7684\u8fd0\u4f5c\uff0c\u56e0\u6b64\u8981\u5c06\u8fd9\u4e9b\u804c\u8d23\u8fdb\u884c\u5206\u79bb\uff0c\u5c06\u4e0d\u540c\u7684\u804c\u8d23\u5c01\u88c5\u5728\u4e0d\u540c\u7684\u7c7b\u4e2d\uff0c\u5373\u5c06\u4e0d\u540c\u7684\u53d8\u5316\u539f\u56e0\u5c01\u88c5\u5728\u4e0d\u540c\u7684\u7c7b\u4e2d\uff0c\u5982\u679c\u591a\u4e2a\u804c\u8d23\u603b\u662f\u540c\u65f6\u53d1\u751f\u6539\u53d8\u5219\u53ef\u5c06\u5b83\u4eec\u5c01\u88c5\u5728\u540c\u4e00\u7c7b\u4e2d\u3002 \u5355\u4e00\u804c\u8d23\u539f\u5219\u662f\u5b9e\u73b0\u9ad8\u5185\u805a\u3001\u4f4e\u8026\u5408\u7684\u6307\u5bfc\u65b9\u9488\uff0c\u5b83\u662f\u6700\u7b80\u5355\u4f46\u53c8\u6700\u96be\u8fd0\u7528\u7684\u539f\u5219\uff0c\u9700\u8981\u8bbe\u8ba1\u4eba\u5458\u53d1\u73b0\u7c7b\u7684\u4e0d\u540c\u804c\u8d23\u5e76\u5c06\u5176\u5206\u79bb\uff0c\u800c\u53d1\u73b0\u7c7b\u7684\u591a\u91cd\u804c\u8d23\u9700\u8981\u8bbe\u8ba1\u4eba\u5458\u5177\u6709\u8f83\u5f3a\u7684\u5206\u6790\u8bbe\u8ba1\u80fd\u529b\u548c\u76f8\u5173\u5b9e\u8df5\u7ecf\u9a8c \u5f00\u95ed\u539f\u5219(Open-Closed Principle, OCP) \u4e00\u4e2a\u8f6f\u4ef6\u5b9e\u4f53\u5e94\u5f53\u5bf9\u6269\u5c55\u5f00\u653e\uff0c\u5bf9\u4fee\u6539\u5173\u95ed\u3002\u5373\u8f6f\u4ef6\u5b9e\u4f53\u5e94\u5c3d\u91cf\u5728\u4e0d\u4fee\u6539\u539f\u6709\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u6269\u5c55\u3002 \u5728\u5f00\u95ed\u539f\u5219\u7684\u5b9a\u4e49\u4e2d\uff0c\u8f6f\u4ef6\u5b9e\u4f53\u53ef\u4ee5\u6307\u4e00\u4e2a\u8f6f\u4ef6\u6a21\u5757\u3001\u4e00\u4e2a\u7531\u591a\u4e2a\u7c7b\u7ec4\u6210\u7684\u5c40\u90e8\u7ed3\u6784\u6216\u4e00\u4e2a\u72ec\u7acb\u7684\u7c7b\u3002 \u4e3a\u4e86\u6ee1\u8db3\u5f00\u95ed\u539f\u5219\uff0c\u9700\u8981\u5bf9\u7cfb\u7edf\u8fdb\u884c\u62bd\u8c61\u5316\u8bbe\u8ba1\uff0c\u62bd\u8c61\u5316\u662f\u5f00\u95ed\u539f\u5219\u7684\u5173\u952e\u3002 \u91cc\u6c0f\u66ff\u6362\u539f\u5219 \u91cc\u6c0f\u4ee3\u6362\u539f\u5219(Liskov Substitution Principle, LSP)\uff1a\u6240\u6709\u5f15\u7528\u57fa\u7c7b\uff08\u7236\u7c7b\uff09\u7684\u5730\u65b9\u5fc5\u987b\u80fd\u900f\u660e\u5730\u4f7f\u7528\u5176\u5b50\u7c7b\u7684\u5bf9\u8c61 \u91cc\u6c0f\u4ee3\u6362\u539f\u5219\u544a\u8bc9\u6211\u4eec\uff0c\u5728\u8f6f\u4ef6\u4e2d\u5c06\u4e00\u4e2a\u57fa\u7c7b\u5bf9\u8c61\u66ff\u6362\u6210\u5b83\u7684\u5b50\u7c7b\u5bf9\u8c61\uff0c\u7a0b\u5e8f\u5c06\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u9519\u8bef\u548c\u5f02\u5e38\uff0c\u53cd\u8fc7\u6765\u5219\u4e0d\u6210\u7acb\uff0c\u5982\u679c\u4e00\u4e2a\u8f6f\u4ef6\u5b9e\u4f53\u4f7f\u7528\u7684\u662f\u4e00\u4e2a\u5b50\u7c7b\u5bf9\u8c61\u7684\u8bdd\uff0c\u90a3\u4e48\u5b83\u4e0d\u4e00\u5b9a\u80fd\u591f\u4f7f\u7528\u57fa\u7c7b\u5bf9\u8c61\u3002\u4f8b\u5982\uff1a\u6211\u559c\u6b22\u52a8\u7269\uff0c\u90a3\u6211\u4e00\u5b9a\u559c\u6b22\u72d7\uff0c\u56e0\u4e3a\u72d7\u662f\u52a8\u7269\u7684\u5b50\u7c7b\uff1b\u4f46\u662f\u6211\u559c\u6b22\u72d7\uff0c\u4e0d\u80fd\u636e\u6b64\u65ad\u5b9a\u6211\u559c\u6b22\u52a8\u7269\uff0c\u56e0\u4e3a\u6211\u5e76\u4e0d\u559c\u6b22\u8001\u9f20\uff0c\u867d\u7136\u5b83\u4e5f\u662f\u52a8\u7269. \u91cc\u6c0f\u4ee3\u6362\u539f\u5219\u662f\u5b9e\u73b0\u5f00\u95ed\u539f\u5219\u7684\u91cd\u8981\u65b9\u5f0f\u4e4b\u4e00\uff0c\u7531\u4e8e\u4f7f\u7528\u57fa\u7c7b\u5bf9\u8c61\u7684\u5730\u65b9\u90fd\u53ef\u4ee5\u4f7f\u7528\u5b50\u7c7b\u5bf9\u8c61\uff0c\u56e0\u6b64 \u5728\u7a0b\u5e8f\u4e2d\u5c3d\u91cf\u4f7f\u7528\u57fa\u7c7b\u7c7b\u578b\u6765\u5bf9\u5bf9\u8c61\u8fdb\u884c\u5b9a\u4e49\uff0c\u800c\u5728\u8fd0\u884c\u65f6\u518d\u786e\u5b9a\u5176\u5b50\u7c7b\u7c7b\u578b\uff0c\u7528\u5b50\u7c7b\u5bf9\u8c61\u6765\u66ff\u6362\u7236\u7c7b\u5bf9\u8c61 \u4f9d\u8d56\u5012\u8f6c\u539f\u5219(Dependency Inversion Principle, DIP)\uff1a \u62bd\u8c61\u4e0d\u5e94\u8be5\u4f9d\u8d56\u4e8e\u7ec6\u8282\uff0c\u7ec6\u8282\u5e94\u5f53\u4f9d\u8d56\u4e8e\u62bd\u8c61\u3002\u6362\u8a00\u4e4b\uff0c\u8981\u9488\u5bf9\u63a5\u53e3\u7f16\u7a0b\uff0c\u800c\u4e0d\u662f\u9488\u5bf9\u5b9e\u73b0\u7f16\u7a0b\u3002 \u4f9d\u8d56\u5012\u8f6c\u539f\u5219\u8981\u6c42\u6211\u4eec\u5728\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u4f20\u9012\u53c2\u6570\u65f6\u6216\u5728\u5173\u8054\u5173\u7cfb\u4e2d\uff0c\u5c3d\u91cf\u5f15\u7528\u5c42\u6b21\u9ad8\u7684\u62bd\u8c61\u5c42\u7c7b\uff0c\u5373\u4f7f\u7528\u63a5\u53e3\u548c\u62bd\u8c61\u7c7b\u8fdb\u884c\u53d8\u91cf\u7c7b\u578b\u58f0\u660e\u3001\u53c2\u6570\u7c7b\u578b\u58f0\u660e\u3001\u65b9\u6cd5\u8fd4\u56de\u7c7b\u578b\u58f0\u660e\uff0c\u4ee5\u53ca\u6570\u636e\u7c7b\u578b\u7684\u8f6c\u6362\u7b49\uff0c\u800c\u4e0d\u8981\u7528\u5177\u4f53\u7c7b\u6765\u505a\u8fd9\u4e9b\u4e8b\u60c5\u3002\u4e3a\u4e86\u786e\u4fdd\u8be5\u539f\u5219\u7684\u5e94\u7528\uff0c\u4e00\u4e2a\u5177\u4f53\u7c7b\u5e94\u5f53\u53ea\u5b9e\u73b0\u63a5\u53e3\u6216\u62bd\u8c61\u7c7b\u4e2d\u58f0\u660e\u8fc7\u7684\u65b9\u6cd5\uff0c\u800c\u4e0d\u8981\u7ed9\u51fa\u591a\u4f59\u7684\u65b9\u6cd5\uff0c\u5426\u5219\u5c06\u65e0\u6cd5\u8c03\u7528\u5230\u5728\u5b50\u7c7b\u4e2d\u589e\u52a0\u7684\u65b0\u65b9\u6cd5 \u5728\u5b9e\u73b0\u4f9d\u8d56\u5012\u8f6c\u539f\u5219\u65f6\uff0c\u6211\u4eec\u9700\u8981\u9488\u5bf9\u62bd\u8c61\u5c42\u7f16\u7a0b\uff0c\u800c\u5c06\u5177\u4f53\u7c7b\u7684\u5bf9\u8c61\u901a\u8fc7\u4f9d\u8d56\u6ce8\u5165(DependencyInjection, DI)\u7684\u65b9\u5f0f\u6ce8\u5165\u5230\u5176\u4ed6\u5bf9\u8c61\u4e2d\uff0c\u4f9d\u8d56\u6ce8\u5165\u662f\u6307\u5f53\u4e00\u4e2a\u5bf9\u8c61\u8981\u4e0e\u5176\u4ed6\u5bf9\u8c61\u53d1\u751f\u4f9d\u8d56\u5173\u7cfb\u65f6\uff0c\u901a\u8fc7\u62bd\u8c61\u6765\u6ce8\u5165\u6240\u4f9d\u8d56\u7684\u5bf9\u8c61\u3002\u5e38\u7528\u7684\u6ce8\u5165\u65b9\u5f0f\u6709\u4e09\u79cd\uff0c\u5206\u522b\u662f\uff1a\u6784\u9020\u6ce8\u5165\uff0c\u8bbe\u503c\u6ce8\u5165\uff08Setter\u6ce8\u5165\uff09\u548c\u63a5\u53e3\u6ce8\u5165\u3002\u6784\u9020\u6ce8\u5165\u662f\u6307\u901a\u8fc7\u6784\u9020\u51fd\u6570\u6765\u4f20\u5165\u5177\u4f53\u7c7b\u7684\u5bf9\u8c61\uff0c\u8bbe\u503c\u6ce8\u5165\u662f\u6307\u901a\u8fc7Setter\u65b9\u6cd5\u6765\u4f20\u5165\u5177\u4f53\u7c7b\u7684\u5bf9\u8c61\uff0c\u800c\u63a5\u53e3\u6ce8\u5165\u662f\u6307\u901a\u8fc7\u5728\u63a5\u53e3\u4e2d\u58f0\u660e\u7684\u4e1a\u52a1\u65b9\u6cd5\u6765\u4f20\u5165\u5177\u4f53\u7c7b\u7684\u5bf9\u8c61\u3002\u8fd9\u4e9b\u65b9\u6cd5\u5728\u5b9a\u4e49\u65f6\u4f7f\u7528\u7684\u662f\u62bd\u8c61\u7c7b\u578b\uff0c\u5728\u8fd0\u884c\u65f6\u518d\u4f20\u5165\u5177\u4f53\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u7531\u5b50\u7c7b\u5bf9\u8c61\u6765\u8986\u76d6\u7236\u7c7b\u5bf9\u8c61 \u63a5\u53e3\u9694\u79bb\u539f\u5219 \u63a5\u53e3\u9694\u79bb\u539f\u5219(Interface Segregation Principle, ISP)\uff1a\u4f7f\u7528\u591a\u4e2a\u4e13\u95e8\u7684\u63a5\u53e3\uff0c\u800c\u4e0d\u4f7f\u7528\u5355\u4e00\u7684\u603b\u63a5\u53e3\uff0c\u5373\u5ba2\u6237\u7aef\u4e0d\u5e94\u8be5\u4f9d\u8d56\u90a3\u4e9b\u5b83\u4e0d\u9700\u8981\u7684\u63a5\u53e3 \u63a5\u53e3\u4ec5\u4ec5\u63d0\u4f9b\u5ba2\u6237\u7aef\u9700\u8981\u7684\u884c\u4e3a\uff0c\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u7684\u884c\u4e3a\u5219\u9690\u85cf\u8d77\u6765\uff0c\u5e94\u5f53\u4e3a\u5ba2\u6237\u7aef\u63d0\u4f9b\u5c3d\u53ef\u80fd\u5c0f\u7684\u5355\u72ec\u7684\u63a5\u53e3\uff0c\u800c\u4e0d\u8981\u63d0\u4f9b\u5927\u7684\u603b\u63a5\u53e3\u3002\u5728\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3\u5c31\u9700\u8981\u5b9e\u73b0\u8be5\u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u56e0\u6b64\u5927\u7684\u603b\u63a5\u53e3\u4f7f\u7528\u8d77\u6765\u4e0d\u4e00\u5b9a\u5f88\u65b9\u4fbf\uff0c\u4e3a\u4e86\u4f7f\u63a5\u53e3\u7684\u804c\u8d23\u5355\u4e00\uff0c\u9700\u8981\u5c06\u5927\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u6839\u636e\u5176\u804c\u8d23\u4e0d\u540c\u5206\u522b\u653e\u5728\u4e0d\u540c\u7684\u5c0f\u63a5\u53e3\u4e2d\uff0c\u4ee5\u786e\u4fdd\u6bcf\u4e2a\u63a5\u53e3\u4f7f\u7528\u8d77\u6765\u90fd\u8f83\u4e3a\u65b9\u4fbf\uff0c\u5e76\u90fd\u627f\u62c5\u67d0\u4e00\u5355\u4e00\u89d2\u8272\u3002\u63a5\u53e3\u5e94\u8be5\u5c3d\u91cf\u7ec6\u5316\uff0c\u540c\u65f6\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u5e94\u8be5\u5c3d\u91cf\u5c11\uff0c\u6bcf\u4e2a\u63a5\u53e3\u4e2d\u53ea\u5305\u542b\u4e00\u4e2a\u5ba2\u6237\u7aef\uff08\u5982\u5b50\u6a21\u5757\u6216\u4e1a\u52a1\u903b\u8f91\u7c7b\uff09\u6240\u9700\u7684\u65b9\u6cd5\u5373\u53ef\uff0c\u8fd9\u79cd\u673a\u5236\u4e5f\u79f0\u4e3a\u201c\u5b9a\u5236\u670d\u52a1\u201d\uff0c\u5373\u4e3a\u4e0d\u540c\u7684\u5ba2\u6237\u7aef\u63d0\u4f9b\u5bbd\u7a84\u4e0d\u540c\u7684\u63a5\u53e3\u3002 \u8fea\u7c73\u7279\u6cd5\u5219 \u4e00\u4e2a\u8f6f\u4ef6\u5b9e\u4f53\u5e94\u5f53\u5c3d\u53ef\u80fd\u5c11\u5730\u4e0e\u5176\u4ed6\u5b9e\u4f53\u53d1\u751f\u76f8\u4e92\u4f5c\u7528\u3002 \u8fea\u7c73\u7279\u6cd5\u5219\u8981\u6c42\u6211\u4eec\u5728\u8bbe\u8ba1\u7cfb\u7edf\u65f6\uff0c\u5e94\u8be5\u5c3d\u91cf\u51cf\u5c11\u5bf9\u8c61\u4e4b\u95f4\u7684\u4ea4\u4e92\uff0c\u5982\u679c\u4e24\u4e2a\u5bf9\u8c61\u4e4b\u95f4\u4e0d\u5fc5\u5f7c\u6b64\u76f4\u63a5\u901a\u4fe1\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u5c31\u4e0d\u5e94\u5f53\u53d1\u751f\u4efb\u4f55\u76f4\u63a5\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u5982\u679c\u5176\u4e2d\u7684\u4e00\u4e2a\u5bf9\u8c61\u9700\u8981\u8c03\u7528\u53e6\u4e00\u4e2a\u5bf9\u8c61\u7684\u67d0\u4e00\u4e2a\u65b9\u6cd5\u7684\u8bdd\uff0c\u53ef\u4ee5\u901a\u8fc7\u7b2c\u4e09\u8005\u8f6c\u53d1\u8fd9\u4e2a\u8c03\u7528\u3002\u7b80\u8a00\u4e4b\uff0c\u5c31\u662f\u901a\u8fc7\u5f15\u5165\u4e00\u4e2a\u5408\u7406\u7684\u7b2c\u4e09\u8005\u6765\u964d\u4f4e\u73b0\u6709\u5bf9\u8c61\u4e4b\u95f4\u7684\u8026\u5408\u5ea6\u3002 \u5728\u5c06\u8fea\u7c73\u7279\u6cd5\u5219\u8fd0\u7528\u5230\u7cfb\u7edf\u8bbe\u8ba1\u4e2d\u65f6\uff0c\u8981\u6ce8\u610f\u4e0b\u9762\u7684\u51e0\u70b9\uff1a\u5728\u7c7b\u7684\u5212\u5206\u4e0a\uff0c\u5e94\u5f53\u5c3d\u91cf\u521b\u5efa\u677e\u8026\u5408\u7684\u7c7b\uff0c\u7c7b\u4e4b\u95f4\u7684\u8026\u5408\u5ea6\u8d8a\u4f4e\uff0c\u5c31\u8d8a\u6709\u5229\u4e8e\u590d\u7528\uff0c\u4e00\u4e2a\u5904\u5728\u677e\u8026\u5408\u4e2d\u7684\u7c7b\u4e00\u65e6\u88ab\u4fee\u6539\uff0c\u4e0d\u4f1a\u5bf9\u5173\u8054\u7684\u7c7b\u9020\u6210\u592a\u5927\u6ce2\u53ca\uff1b\u5728\u7c7b\u7684\u7ed3\u6784\u8bbe\u8ba1\u4e0a\uff0c\u6bcf\u4e00\u4e2a\u7c7b\u90fd\u5e94\u5f53\u5c3d\u91cf\u964d\u4f4e\u5176\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u7684\u8bbf\u95ee\u6743\u9650\uff1b\u5728\u7c7b\u7684\u8bbe\u8ba1\u4e0a\uff0c\u53ea\u8981\u6709\u53ef\u80fd\uff0c\u4e00\u4e2a\u7c7b\u578b\u5e94\u5f53\u8bbe\u8ba1\u6210\u4e0d\u53d8\u7c7b\uff1b\u5728\u5bf9\u5176\u4ed6\u7c7b\u7684\u5f15\u7528\u4e0a\uff0c\u4e00\u4e2a\u5bf9\u8c61\u5bf9\u5176\u4ed6\u5bf9\u8c61\u7684\u5f15\u7528\u5e94\u5f53\u964d\u5230\u6700\u4f4e\u3002 \u63a8\u8bbe\u8ba1\u6a21\u5f0f\u539f\u5219\u8bb2\u89e3\u6bd4\u8f83\u597d\u7684\u6587\u7ae0\u94fe\u63a5\u63a8\u8350","title":"\u8bbe\u8ba1\u6a21\u5f0f\u7684\u539f\u5219"},{"location":"python-design-patterns/python-design/#_4","text":"","title":"\u8bbe\u8ba1\u6a21\u5f0f\u7684\u4ecb\u7ecd"},{"location":"user-guide/styling-your-docs/","text":"\u4e2d\u6587\u6d4b\u8bd5 styling","title":"Styling your \u4e2d\u6587"},{"location":"user-guide/styling-your-docs/#styling","text":"","title":"\u4e2d\u6587\u6d4b\u8bd5 styling"},{"location":"user-guide/writing-your-docs/","text":"\u4e2d\u6587 writing","title":"\u4e2d\u6587 writing"},{"location":"user-guide/writing-your-docs/#writing","text":"","title":"\u4e2d\u6587 writing"}]}